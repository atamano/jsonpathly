// Generated from ./src/parser/generated/JSONPath.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

export class JSONPathLexer extends Lexer {
  public static readonly CURRENT_VALUE = 1;
  public static readonly DOTDOT = 2;
  public static readonly ROOT_VALUE = 3;
  public static readonly DOT = 4;
  public static readonly STAR = 5;
  public static readonly AND = 6;
  public static readonly EQ = 7;
  public static readonly GE = 8;
  public static readonly GT = 9;
  public static readonly LE = 10;
  public static readonly LT = 11;
  public static readonly NE = 12;
  public static readonly REG = 13;
  public static readonly IN = 14;
  public static readonly NIN = 15;
  public static readonly SUB = 16;
  public static readonly ANY = 17;
  public static readonly NON = 18;
  public static readonly SIZO = 19;
  public static readonly SIZ = 20;
  public static readonly NOT = 21;
  public static readonly OR = 22;
  public static readonly TRUE = 23;
  public static readonly FALSE = 24;
  public static readonly NULL = 25;
  public static readonly BRACE_LEFT = 26;
  public static readonly BRACE_RIGHT = 27;
  public static readonly BRACKET_LEFT = 28;
  public static readonly BRACKET_RIGHT = 29;
  public static readonly COLON = 30;
  public static readonly COMMA = 31;
  public static readonly PAREN_LEFT = 32;
  public static readonly PAREN_RIGHT = 33;
  public static readonly QUESTION = 34;
  public static readonly MINUS_SP = 35;
  public static readonly PLUS = 36;
  public static readonly DIV = 37;
  public static readonly REGEX_OPT = 38;
  public static readonly REGEX_EXPR = 39;
  public static readonly IDENTIFIER = 40;
  public static readonly STRING = 41;
  public static readonly NUMBER = 42;
  public static readonly WS = 43;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'CURRENT_VALUE',
    'DOTDOT',
    'ROOT_VALUE',
    'DOT',
    'STAR',
    'AND',
    'EQ',
    'GE',
    'GT',
    'LE',
    'LT',
    'NE',
    'REG',
    'IN',
    'NIN',
    'SUB',
    'ANY',
    'NON',
    'SIZO',
    'SIZ',
    'NOT',
    'OR',
    'TRUE',
    'FALSE',
    'NULL',
    'BRACE_LEFT',
    'BRACE_RIGHT',
    'BRACKET_LEFT',
    'BRACKET_RIGHT',
    'COLON',
    'COMMA',
    'PAREN_LEFT',
    'PAREN_RIGHT',
    'QUESTION',
    'MINUS_SP',
    'PLUS',
    'DIV',
    'REGEX_OPT',
    'REGEX_EXPR',
    'IDENTIFIER',
    'STRING',
    'ESC_SINGLE',
    'ESC_DOUBLE',
    'UNICODE',
    'HEX',
    'SAFECODEPOINT_SINGLE',
    'SAFECODEPOINT_DOUBLE',
    'NUMBER',
    'INT',
    'EXP',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'@'",
    "'..'",
    "'$'",
    "'.'",
    "'*'",
    "'&&'",
    "'=='",
    "'>='",
    "'>'",
    "'<='",
    "'<'",
    "'!='",
    "'=~'",
    "' in '",
    "' nin '",
    "' subsetof '",
    "' anyof '",
    "' noneof '",
    "' sizeof '",
    "' size '",
    "'!'",
    "'||'",
    "'true'",
    "'false'",
    "'null'",
    "'{'",
    "'}'",
    "'['",
    "']'",
    "':'",
    "','",
    "'('",
    "')'",
    "'?'",
    "'- '",
    "'+'",
    "'/'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'CURRENT_VALUE',
    'DOTDOT',
    'ROOT_VALUE',
    'DOT',
    'STAR',
    'AND',
    'EQ',
    'GE',
    'GT',
    'LE',
    'LT',
    'NE',
    'REG',
    'IN',
    'NIN',
    'SUB',
    'ANY',
    'NON',
    'SIZO',
    'SIZ',
    'NOT',
    'OR',
    'TRUE',
    'FALSE',
    'NULL',
    'BRACE_LEFT',
    'BRACE_RIGHT',
    'BRACKET_LEFT',
    'BRACKET_RIGHT',
    'COLON',
    'COMMA',
    'PAREN_LEFT',
    'PAREN_RIGHT',
    'QUESTION',
    'MINUS_SP',
    'PLUS',
    'DIV',
    'REGEX_OPT',
    'REGEX_EXPR',
    'IDENTIFIER',
    'STRING',
    'NUMBER',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    JSONPathLexer._LITERAL_NAMES,
    JSONPathLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return JSONPathLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(JSONPathLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'JSONPath.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return JSONPathLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return JSONPathLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return JSONPathLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return JSONPathLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02-\u0155\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04' +
    '4\t4\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03' +
    '\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03' +
    '\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03' +
    '\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03' +
    '\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03' +
    '\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03' +
    '\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03' +
    '\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03' +
    '\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03' +
    '\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03' +
    '\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03' +
    '\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03' +
    '\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03' +
    ' \x03!\x03!\x03"\x03"\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03&\x03&\x03' +
    "'\x07'\xF1\n'\f'\x0E'\xF4\v'\x03(\x03(\x07(\xF8\n(\f(\x0E(\xFB\v" +
    '(\x03(\x03(\x03)\x03)\x07)\u0101\n)\f)\x0E)\u0104\v)\x03*\x03*\x03*\x07' +
    '*\u0109\n*\f*\x0E*\u010C\v*\x03*\x03*\x03*\x03*\x07*\u0112\n*\f*\x0E*' +
    '\u0115\v*\x03*\x05*\u0118\n*\x03+\x03+\x03+\x05+\u011D\n+\x03,\x03,\x03' +
    ',\x05,\u0122\n,\x03-\x03-\x03-\x03-\x03-\x03-\x03.\x03.\x03/\x03/\x03' +
    '0\x030\x031\x051\u0131\n1\x031\x031\x031\x061\u0136\n1\r1\x0E1\u0137\x05' +
    '1\u013A\n1\x031\x051\u013D\n1\x032\x032\x032\x072\u0142\n2\f2\x0E2\u0145' +
    '\v2\x052\u0147\n2\x033\x033\x053\u014B\n3\x033\x033\x034\x064\u0150\n' +
    '4\r4\x0E4\u0151\x034\x034\x03\xF9\x02\x025\x03\x02\x03\x05\x02\x04\x07' +
    '\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15' +
    '\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02' +
    "\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191" +
    '\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02' +
    '"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02\x02W\x02' +
    '\x02Y\x02\x02[\x02\x02]\x02\x02_\x02\x02a\x02,c\x02\x02e\x02\x02g\x02' +
    '-\x03\x02\x0F\b\x02iikkoouuww{{\x05\x02C\\aac|\x06\x022;C\\aac|\n\x02' +
    '))11^^ddhhppttvv\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05\x02\x02!))^^' +
    '\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x05\x02' +
    '\v\f\x0F\x0F""\x02\u015E\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02' +
    '\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02' +
    '\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02' +
    '\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02' +
    '\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02' +
    '\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02' +
    "%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
    '\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02' +
    '\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02' +
    '9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02' +
    '\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02' +
    '\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03' +
    '\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02' +
    '\x02\x02a\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x03i\x03\x02\x02\x02\x05' +
    'k\x03\x02\x02\x02\x07n\x03\x02\x02\x02\tp\x03\x02\x02\x02\vr\x03\x02\x02' +
    '\x02\rt\x03\x02\x02\x02\x0Fw\x03\x02\x02\x02\x11z\x03\x02\x02\x02\x13' +
    '}\x03\x02\x02\x02\x15\x7F\x03\x02\x02\x02\x17\x82\x03\x02\x02\x02\x19' +
    '\x84\x03\x02\x02\x02\x1B\x87\x03\x02\x02\x02\x1D\x8A\x03\x02\x02\x02\x1F' +
    '\x8F\x03\x02\x02\x02!\x95\x03\x02\x02\x02#\xA0\x03\x02\x02\x02%\xA8\x03' +
    "\x02\x02\x02'\xB1\x03\x02\x02\x02)\xBA\x03\x02\x02\x02+\xC1\x03\x02\x02" +
    '\x02-\xC3\x03\x02\x02\x02/\xC6\x03\x02\x02\x021\xCB\x03\x02\x02\x023\xD1' +
    '\x03\x02\x02\x025\xD6\x03\x02\x02\x027\xD8\x03\x02\x02\x029\xDA\x03\x02' +
    '\x02\x02;\xDC\x03\x02\x02\x02=\xDE\x03\x02\x02\x02?\xE0\x03\x02\x02\x02' +
    'A\xE2\x03\x02\x02\x02C\xE4\x03\x02\x02\x02E\xE6\x03\x02\x02\x02G\xE8\x03' +
    '\x02\x02\x02I\xEB\x03\x02\x02\x02K\xED\x03\x02\x02\x02M\xF2\x03\x02\x02' +
    '\x02O\xF5\x03\x02\x02\x02Q\xFE\x03\x02\x02\x02S\u0117\x03\x02\x02\x02' +
    'U\u0119\x03\x02\x02\x02W\u011E\x03\x02\x02\x02Y\u0123\x03\x02\x02\x02' +
    '[\u0129\x03\x02\x02\x02]\u012B\x03\x02\x02\x02_\u012D\x03\x02\x02\x02' +
    'a\u0130\x03\x02\x02\x02c\u0146\x03\x02\x02\x02e\u0148\x03\x02\x02\x02' +
    'g\u014F\x03\x02\x02\x02ij\x07B\x02\x02j\x04\x03\x02\x02\x02kl\x070\x02' +
    '\x02lm\x070\x02\x02m\x06\x03\x02\x02\x02no\x07&\x02\x02o\b\x03\x02\x02' +
    '\x02pq\x070\x02\x02q\n\x03\x02\x02\x02rs\x07,\x02\x02s\f\x03\x02\x02\x02' +
    'tu\x07(\x02\x02uv\x07(\x02\x02v\x0E\x03\x02\x02\x02wx\x07?\x02\x02xy\x07' +
    '?\x02\x02y\x10\x03\x02\x02\x02z{\x07@\x02\x02{|\x07?\x02\x02|\x12\x03' +
    '\x02\x02\x02}~\x07@\x02\x02~\x14\x03\x02\x02\x02\x7F\x80\x07>\x02\x02' +
    '\x80\x81\x07?\x02\x02\x81\x16\x03\x02\x02\x02\x82\x83\x07>\x02\x02\x83' +
    '\x18\x03\x02\x02\x02\x84\x85\x07#\x02\x02\x85\x86\x07?\x02\x02\x86\x1A' +
    '\x03\x02\x02\x02\x87\x88\x07?\x02\x02\x88\x89\x07\x80\x02\x02\x89\x1C' +
    '\x03\x02\x02\x02\x8A\x8B\x07"\x02\x02\x8B\x8C\x07k\x02\x02\x8C\x8D\x07' +
    'p\x02\x02\x8D\x8E\x07"\x02\x02\x8E\x1E\x03\x02\x02\x02\x8F\x90\x07"' +
    '\x02\x02\x90\x91\x07p\x02\x02\x91\x92\x07k\x02\x02\x92\x93\x07p\x02\x02' +
    '\x93\x94\x07"\x02\x02\x94 \x03\x02\x02\x02\x95\x96\x07"\x02\x02\x96' +
    '\x97\x07u\x02\x02\x97\x98\x07w\x02\x02\x98\x99\x07d\x02\x02\x99\x9A\x07' +
    'u\x02\x02\x9A\x9B\x07g\x02\x02\x9B\x9C\x07v\x02\x02\x9C\x9D\x07q\x02\x02' +
    '\x9D\x9E\x07h\x02\x02\x9E\x9F\x07"\x02\x02\x9F"\x03\x02\x02\x02\xA0' +
    '\xA1\x07"\x02\x02\xA1\xA2\x07c\x02\x02\xA2\xA3\x07p\x02\x02\xA3\xA4\x07' +
    '{\x02\x02\xA4\xA5\x07q\x02\x02\xA5\xA6\x07h\x02\x02\xA6\xA7\x07"\x02' +
    '\x02\xA7$\x03\x02\x02\x02\xA8\xA9\x07"\x02\x02\xA9\xAA\x07p\x02\x02\xAA' +
    '\xAB\x07q\x02\x02\xAB\xAC\x07p\x02\x02\xAC\xAD\x07g\x02\x02\xAD\xAE\x07' +
    'q\x02\x02\xAE\xAF\x07h\x02\x02\xAF\xB0\x07"\x02\x02\xB0&\x03\x02\x02' +
    '\x02\xB1\xB2\x07"\x02\x02\xB2\xB3\x07u\x02\x02\xB3\xB4\x07k\x02\x02\xB4' +
    '\xB5\x07|\x02\x02\xB5\xB6\x07g\x02\x02\xB6\xB7\x07q\x02\x02\xB7\xB8\x07' +
    'h\x02\x02\xB8\xB9\x07"\x02\x02\xB9(\x03\x02\x02\x02\xBA\xBB\x07"\x02' +
    '\x02\xBB\xBC\x07u\x02\x02\xBC\xBD\x07k\x02\x02\xBD\xBE\x07|\x02\x02\xBE' +
    '\xBF\x07g\x02\x02\xBF\xC0\x07"\x02\x02\xC0*\x03\x02\x02\x02\xC1\xC2\x07' +
    '#\x02\x02\xC2,\x03\x02\x02\x02\xC3\xC4\x07~\x02\x02\xC4\xC5\x07~\x02\x02' +
    '\xC5.\x03\x02\x02\x02\xC6\xC7\x07v\x02\x02\xC7\xC8\x07t\x02\x02\xC8\xC9' +
    '\x07w\x02\x02\xC9\xCA\x07g\x02\x02\xCA0\x03\x02\x02\x02\xCB\xCC\x07h\x02' +
    '\x02\xCC\xCD\x07c\x02\x02\xCD\xCE\x07n\x02\x02\xCE\xCF\x07u\x02\x02\xCF' +
    '\xD0\x07g\x02\x02\xD02\x03\x02\x02\x02\xD1\xD2\x07p\x02\x02\xD2\xD3\x07' +
    'w\x02\x02\xD3\xD4\x07n\x02\x02\xD4\xD5\x07n\x02\x02\xD54\x03\x02\x02\x02' +
    '\xD6\xD7\x07}\x02\x02\xD76\x03\x02\x02\x02\xD8\xD9\x07\x7F\x02\x02\xD9' +
    '8\x03\x02\x02\x02\xDA\xDB\x07]\x02\x02\xDB:\x03\x02\x02\x02\xDC\xDD\x07' +
    '_\x02\x02\xDD<\x03\x02\x02\x02\xDE\xDF\x07<\x02\x02\xDF>\x03\x02\x02\x02' +
    '\xE0\xE1\x07.\x02\x02\xE1@\x03\x02\x02\x02\xE2\xE3\x07*\x02\x02\xE3B\x03' +
    '\x02\x02\x02\xE4\xE5\x07+\x02\x02\xE5D\x03\x02\x02\x02\xE6\xE7\x07A\x02' +
    '\x02\xE7F\x03\x02\x02\x02\xE8\xE9\x07/\x02\x02\xE9\xEA\x07"\x02\x02\xEA' +
    'H\x03\x02\x02\x02\xEB\xEC\x07-\x02\x02\xECJ\x03\x02\x02\x02\xED\xEE\x07' +
    '1\x02\x02\xEEL\x03\x02\x02\x02\xEF\xF1\t\x02\x02\x02\xF0\xEF\x03\x02\x02' +
    '\x02\xF1\xF4\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02\xF2\xF3\x03\x02\x02' +
    '\x02\xF3N\x03\x02\x02\x02\xF4\xF2\x03\x02\x02\x02\xF5\xF9\x071\x02\x02' +
    '\xF6\xF8\v\x02\x02\x02\xF7\xF6\x03\x02\x02\x02\xF8\xFB\x03\x02\x02\x02' +
    '\xF9\xFA\x03\x02\x02\x02\xF9\xF7\x03\x02\x02\x02\xFA\xFC\x03\x02\x02\x02' +
    '\xFB\xF9\x03\x02\x02\x02\xFC\xFD\x071\x02\x02\xFDP\x03\x02\x02\x02\xFE' +
    '\u0102\t\x03\x02\x02\xFF\u0101\t\x04\x02\x02\u0100\xFF\x03\x02\x02\x02' +
    '\u0101\u0104\x03\x02\x02\x02\u0102\u0100\x03\x02\x02\x02\u0102\u0103\x03' +
    '\x02\x02\x02\u0103R\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0105' +
    '\u010A\x07$\x02\x02\u0106\u0109\x05W,\x02\u0107\u0109\x05_0\x02\u0108' +
    '\u0106\x03\x02\x02\x02\u0108\u0107\x03\x02\x02\x02\u0109\u010C\x03\x02' +
    '\x02\x02\u010A\u0108\x03\x02\x02\x02\u010A\u010B\x03\x02\x02\x02\u010B' +
    '\u010D\x03\x02\x02\x02\u010C\u010A\x03\x02\x02\x02\u010D\u0118\x07$\x02' +
    '\x02\u010E\u0113\x07)\x02\x02\u010F\u0112\x05U+\x02\u0110\u0112\x05]/' +
    '\x02\u0111\u010F\x03\x02\x02\x02\u0111\u0110\x03\x02\x02\x02\u0112\u0115' +
    '\x03\x02\x02\x02\u0113\u0111\x03\x02\x02\x02\u0113\u0114\x03\x02\x02\x02' +
    '\u0114\u0116\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0116\u0118\x07' +
    ')\x02\x02\u0117\u0105\x03\x02\x02\x02\u0117\u010E\x03\x02\x02\x02\u0118' +
    'T\x03\x02\x02\x02\u0119\u011C\x07^\x02\x02\u011A\u011D\t\x05\x02\x02\u011B' +
    '\u011D\x05Y-\x02\u011C\u011A\x03\x02\x02\x02\u011C\u011B\x03\x02\x02\x02' +
    '\u011DV\x03\x02\x02\x02\u011E\u0121\x07^\x02\x02\u011F\u0122\t\x06\x02' +
    '\x02\u0120\u0122\x05Y-\x02\u0121\u011F\x03\x02\x02\x02\u0121\u0120\x03' +
    '\x02\x02\x02\u0122X\x03\x02\x02\x02\u0123\u0124\x07w\x02\x02\u0124\u0125' +
    '\x05[.\x02\u0125\u0126\x05[.\x02\u0126\u0127\x05[.\x02\u0127\u0128\x05' +
    '[.\x02\u0128Z\x03\x02\x02\x02\u0129\u012A\t\x07\x02\x02\u012A\\\x03\x02' +
    '\x02\x02\u012B\u012C\n\b\x02\x02\u012C^\x03\x02\x02\x02\u012D\u012E\n' +
    '\t\x02\x02\u012E`\x03\x02\x02\x02\u012F\u0131\x07/\x02\x02\u0130\u012F' +
    '\x03\x02\x02\x02\u0130\u0131\x03\x02\x02\x02\u0131\u0132\x03\x02\x02\x02' +
    '\u0132\u0139\x05c2\x02\u0133\u0135\x070\x02\x02\u0134\u0136\t\n\x02\x02' +
    '\u0135\u0134\x03\x02\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137\u0135\x03' +
    '\x02\x02\x02\u0137\u0138\x03\x02\x02\x02\u0138\u013A\x03\x02\x02\x02\u0139' +
    '\u0133\x03\x02\x02\x02\u0139\u013A\x03\x02\x02\x02\u013A\u013C\x03\x02' +
    '\x02\x02\u013B\u013D\x05e3\x02\u013C\u013B\x03\x02\x02\x02\u013C\u013D' +
    '\x03\x02\x02\x02\u013Db\x03\x02\x02\x02\u013E\u0147\x072\x02\x02\u013F' +
    '\u0143\t\v\x02\x02\u0140\u0142\t\n\x02\x02\u0141\u0140\x03\x02\x02\x02' +
    '\u0142\u0145\x03\x02\x02\x02\u0143\u0141\x03\x02\x02\x02\u0143\u0144\x03' +
    '\x02\x02\x02\u0144\u0147\x03\x02\x02\x02\u0145\u0143\x03\x02\x02\x02\u0146' +
    '\u013E\x03\x02\x02\x02\u0146\u013F\x03\x02\x02\x02\u0147d\x03\x02\x02' +
    '\x02\u0148\u014A\t\f\x02\x02\u0149\u014B\t\r\x02\x02\u014A\u0149\x03\x02' +
    '\x02\x02\u014A\u014B\x03\x02\x02\x02\u014B\u014C\x03\x02\x02\x02\u014C' +
    '\u014D\x05c2\x02\u014Df\x03\x02\x02\x02\u014E\u0150\t\x0E\x02\x02\u014F' +
    '\u014E\x03\x02\x02\x02\u0150\u0151\x03\x02\x02\x02\u0151\u014F\x03\x02' +
    '\x02\x02\u0151\u0152\x03\x02\x02\x02\u0152\u0153\x03\x02\x02\x02\u0153' +
    '\u0154\b4\x02\x02\u0154h\x03\x02\x02\x02\x15\x02\xF2\xF9\u0102\u0108\u010A' +
    '\u0111\u0113\u0117\u011C\u0121\u0130\u0137\u0139\u013C\u0143\u0146\u014A' +
    '\u0151\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!JSONPathLexer.__ATN) {
      JSONPathLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONPathLexer._serializedATN));
    }

    return JSONPathLexer.__ATN;
  }
}
