// Generated from ./src/parser/generated/JSONPath.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

export class JSONPathLexer extends Lexer {
  public static readonly CURRENT_VALUE = 1;
  public static readonly DOTDOT = 2;
  public static readonly ROOT_VALUE = 3;
  public static readonly DOT = 4;
  public static readonly STAR = 5;
  public static readonly AND = 6;
  public static readonly EQ = 7;
  public static readonly GE = 8;
  public static readonly GT = 9;
  public static readonly LE = 10;
  public static readonly LT = 11;
  public static readonly NE = 12;
  public static readonly REG = 13;
  public static readonly IN = 14;
  public static readonly NIN = 15;
  public static readonly SUB = 16;
  public static readonly ANY = 17;
  public static readonly NON = 18;
  public static readonly SIZO = 19;
  public static readonly SIZ = 20;
  public static readonly EMPT = 21;
  public static readonly NOT = 22;
  public static readonly OR = 23;
  public static readonly TRUE = 24;
  public static readonly FALSE = 25;
  public static readonly NULL = 26;
  public static readonly BRACE_LEFT = 27;
  public static readonly BRACE_RIGHT = 28;
  public static readonly BRACKET_LEFT = 29;
  public static readonly BRACKET_RIGHT = 30;
  public static readonly COLON = 31;
  public static readonly COMMA = 32;
  public static readonly PAREN_LEFT = 33;
  public static readonly PAREN_RIGHT = 34;
  public static readonly QUESTION = 35;
  public static readonly MINUS_SP = 36;
  public static readonly PLUS = 37;
  public static readonly DIV = 38;
  public static readonly REGEX_OPT = 39;
  public static readonly REGEX_EXPR = 40;
  public static readonly IDENTIFIER = 41;
  public static readonly STRING = 42;
  public static readonly NUMBER = 43;
  public static readonly WS = 44;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'CURRENT_VALUE',
    'DOTDOT',
    'ROOT_VALUE',
    'DOT',
    'STAR',
    'AND',
    'EQ',
    'GE',
    'GT',
    'LE',
    'LT',
    'NE',
    'REG',
    'IN',
    'NIN',
    'SUB',
    'ANY',
    'NON',
    'SIZO',
    'SIZ',
    'EMPT',
    'NOT',
    'OR',
    'TRUE',
    'FALSE',
    'NULL',
    'BRACE_LEFT',
    'BRACE_RIGHT',
    'BRACKET_LEFT',
    'BRACKET_RIGHT',
    'COLON',
    'COMMA',
    'PAREN_LEFT',
    'PAREN_RIGHT',
    'QUESTION',
    'MINUS_SP',
    'PLUS',
    'DIV',
    'REGEX_OPT',
    'REGEX_EXPR',
    'IDENTIFIER',
    'STRING',
    'ESC_SINGLE',
    'ESC_DOUBLE',
    'UNICODE',
    'HEX',
    'SAFECODEPOINT_SINGLE',
    'SAFECODEPOINT_DOUBLE',
    'NUMBER',
    'INT',
    'EXP',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'@'",
    "'..'",
    "'$'",
    "'.'",
    "'*'",
    "'&&'",
    "'=='",
    "'>='",
    "'>'",
    "'<='",
    "'<'",
    "'!='",
    "'=~'",
    "' in '",
    "' nin '",
    "' subsetof '",
    "' anyof '",
    "' noneof '",
    "' sizeof '",
    "' size '",
    "' empty'",
    "'!'",
    "'||'",
    "'true'",
    "'false'",
    "'null'",
    "'{'",
    "'}'",
    "'['",
    "']'",
    "':'",
    "','",
    "'('",
    "')'",
    "'?'",
    "'- '",
    "'+'",
    "'/'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'CURRENT_VALUE',
    'DOTDOT',
    'ROOT_VALUE',
    'DOT',
    'STAR',
    'AND',
    'EQ',
    'GE',
    'GT',
    'LE',
    'LT',
    'NE',
    'REG',
    'IN',
    'NIN',
    'SUB',
    'ANY',
    'NON',
    'SIZO',
    'SIZ',
    'EMPT',
    'NOT',
    'OR',
    'TRUE',
    'FALSE',
    'NULL',
    'BRACE_LEFT',
    'BRACE_RIGHT',
    'BRACKET_LEFT',
    'BRACKET_RIGHT',
    'COLON',
    'COMMA',
    'PAREN_LEFT',
    'PAREN_RIGHT',
    'QUESTION',
    'MINUS_SP',
    'PLUS',
    'DIV',
    'REGEX_OPT',
    'REGEX_EXPR',
    'IDENTIFIER',
    'STRING',
    'NUMBER',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    JSONPathLexer._LITERAL_NAMES,
    JSONPathLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return JSONPathLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(JSONPathLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'JSONPath.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return JSONPathLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return JSONPathLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return JSONPathLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return JSONPathLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02.\u015E\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04' +
    '4\t4\x045\t5\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03' +
    '\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b' +
    '\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03' +
    '\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F' +
    '\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11' +
    '\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12' +
    '\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13' +
    '\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14' +
    '\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15' +
    '\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16' +
    '\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19' +
    '\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A' +
    '\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D' +
    '\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03"\x03' +
    "\"\x03#\x03#\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03'\x03'\x03(\x07(" +
    '\xFA\n(\f(\x0E(\xFD\v(\x03)\x03)\x07)\u0101\n)\f)\x0E)\u0104\v)\x03)\x03' +
    ')\x03*\x03*\x07*\u010A\n*\f*\x0E*\u010D\v*\x03+\x03+\x03+\x07+\u0112\n' +
    '+\f+\x0E+\u0115\v+\x03+\x03+\x03+\x03+\x07+\u011B\n+\f+\x0E+\u011E\v+' +
    '\x03+\x05+\u0121\n+\x03,\x03,\x03,\x05,\u0126\n,\x03-\x03-\x03-\x05-\u012B' +
    '\n-\x03.\x03.\x03.\x03.\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x032\x05' +
    '2\u013A\n2\x032\x032\x032\x062\u013F\n2\r2\x0E2\u0140\x052\u0143\n2\x03' +
    '2\x052\u0146\n2\x033\x033\x033\x073\u014B\n3\f3\x0E3\u014E\v3\x053\u0150' +
    '\n3\x034\x034\x054\u0154\n4\x034\x034\x035\x065\u0159\n5\r5\x0E5\u015A' +
    '\x035\x035\x03\u0102\x02\x026\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02' +
    '\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02' +
    '\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%' +
    "\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B" +
    '5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02#E\x02$G\x02' +
    "%I\x02&K\x02'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02\x02Y\x02\x02[\x02\x02" +
    ']\x02\x02_\x02\x02a\x02\x02c\x02-e\x02\x02g\x02\x02i\x02.\x03\x02\x0F' +
    '\b\x02iikkoouuww{{\x05\x02C\\aac|\x06\x022;C\\aac|\n\x02))11^^ddhhppt' +
    'tvv\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05\x02\x02!))^^\x05\x02\x02!' +
    '$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x05\x02\v\f\x0F\x0F"' +
    '"\x02\u0167\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03' +
    '\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02' +
    '\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02' +
    '\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02' +
    '\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02' +
    '\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02' +
    "\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
    '\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02' +
    '\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02' +
    '\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03' +
    '\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02' +
    '\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02' +
    'O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02' +
    '\x02\x02\x02c\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x03k\x03\x02\x02\x02' +
    '\x05m\x03\x02\x02\x02\x07p\x03\x02\x02\x02\tr\x03\x02\x02\x02\vt\x03\x02' +
    '\x02\x02\rv\x03\x02\x02\x02\x0Fy\x03\x02\x02\x02\x11|\x03\x02\x02\x02' +
    '\x13\x7F\x03\x02\x02\x02\x15\x81\x03\x02\x02\x02\x17\x84\x03\x02\x02\x02' +
    '\x19\x86\x03\x02\x02\x02\x1B\x89\x03\x02\x02\x02\x1D\x8C\x03\x02\x02\x02' +
    '\x1F\x91\x03\x02\x02\x02!\x97\x03\x02\x02\x02#\xA2\x03\x02\x02\x02%\xAA' +
    "\x03\x02\x02\x02'\xB3\x03\x02\x02\x02)\xBC\x03\x02\x02\x02+\xC3\x03\x02" +
    '\x02\x02-\xCA\x03\x02\x02\x02/\xCC\x03\x02\x02\x021\xCF\x03\x02\x02\x02' +
    '3\xD4\x03\x02\x02\x025\xDA\x03\x02\x02\x027\xDF\x03\x02\x02\x029\xE1\x03' +
    '\x02\x02\x02;\xE3\x03\x02\x02\x02=\xE5\x03\x02\x02\x02?\xE7\x03\x02\x02' +
    '\x02A\xE9\x03\x02\x02\x02C\xEB\x03\x02\x02\x02E\xED\x03\x02\x02\x02G\xEF' +
    '\x03\x02\x02\x02I\xF1\x03\x02\x02\x02K\xF4\x03\x02\x02\x02M\xF6\x03\x02' +
    '\x02\x02O\xFB\x03\x02\x02\x02Q\xFE\x03\x02\x02\x02S\u0107\x03\x02\x02' +
    '\x02U\u0120\x03\x02\x02\x02W\u0122\x03\x02\x02\x02Y\u0127\x03\x02\x02' +
    '\x02[\u012C\x03\x02\x02\x02]\u0132\x03\x02\x02\x02_\u0134\x03\x02\x02' +
    '\x02a\u0136\x03\x02\x02\x02c\u0139\x03\x02\x02\x02e\u014F\x03\x02\x02' +
    '\x02g\u0151\x03\x02\x02\x02i\u0158\x03\x02\x02\x02kl\x07B\x02\x02l\x04' +
    '\x03\x02\x02\x02mn\x070\x02\x02no\x070\x02\x02o\x06\x03\x02\x02\x02pq' +
    '\x07&\x02\x02q\b\x03\x02\x02\x02rs\x070\x02\x02s\n\x03\x02\x02\x02tu\x07' +
    ',\x02\x02u\f\x03\x02\x02\x02vw\x07(\x02\x02wx\x07(\x02\x02x\x0E\x03\x02' +
    '\x02\x02yz\x07?\x02\x02z{\x07?\x02\x02{\x10\x03\x02\x02\x02|}\x07@\x02' +
    '\x02}~\x07?\x02\x02~\x12\x03\x02\x02\x02\x7F\x80\x07@\x02\x02\x80\x14' +
    '\x03\x02\x02\x02\x81\x82\x07>\x02\x02\x82\x83\x07?\x02\x02\x83\x16\x03' +
    '\x02\x02\x02\x84\x85\x07>\x02\x02\x85\x18\x03\x02\x02\x02\x86\x87\x07' +
    '#\x02\x02\x87\x88\x07?\x02\x02\x88\x1A\x03\x02\x02\x02\x89\x8A\x07?\x02' +
    '\x02\x8A\x8B\x07\x80\x02\x02\x8B\x1C\x03\x02\x02\x02\x8C\x8D\x07"\x02' +
    '\x02\x8D\x8E\x07k\x02\x02\x8E\x8F\x07p\x02\x02\x8F\x90\x07"\x02\x02\x90' +
    '\x1E\x03\x02\x02\x02\x91\x92\x07"\x02\x02\x92\x93\x07p\x02\x02\x93\x94' +
    '\x07k\x02\x02\x94\x95\x07p\x02\x02\x95\x96\x07"\x02\x02\x96 \x03\x02' +
    '\x02\x02\x97\x98\x07"\x02\x02\x98\x99\x07u\x02\x02\x99\x9A\x07w\x02\x02' +
    '\x9A\x9B\x07d\x02\x02\x9B\x9C\x07u\x02\x02\x9C\x9D\x07g\x02\x02\x9D\x9E' +
    '\x07v\x02\x02\x9E\x9F\x07q\x02\x02\x9F\xA0\x07h\x02\x02\xA0\xA1\x07"' +
    '\x02\x02\xA1"\x03\x02\x02\x02\xA2\xA3\x07"\x02\x02\xA3\xA4\x07c\x02' +
    '\x02\xA4\xA5\x07p\x02\x02\xA5\xA6\x07{\x02\x02\xA6\xA7\x07q\x02\x02\xA7' +
    '\xA8\x07h\x02\x02\xA8\xA9\x07"\x02\x02\xA9$\x03\x02\x02\x02\xAA\xAB\x07' +
    '"\x02\x02\xAB\xAC\x07p\x02\x02\xAC\xAD\x07q\x02\x02\xAD\xAE\x07p\x02' +
    '\x02\xAE\xAF\x07g\x02\x02\xAF\xB0\x07q\x02\x02\xB0\xB1\x07h\x02\x02\xB1' +
    '\xB2\x07"\x02\x02\xB2&\x03\x02\x02\x02\xB3\xB4\x07"\x02\x02\xB4\xB5' +
    '\x07u\x02\x02\xB5\xB6\x07k\x02\x02\xB6\xB7\x07|\x02\x02\xB7\xB8\x07g\x02' +
    '\x02\xB8\xB9\x07q\x02\x02\xB9\xBA\x07h\x02\x02\xBA\xBB\x07"\x02\x02\xBB' +
    '(\x03\x02\x02\x02\xBC\xBD\x07"\x02\x02\xBD\xBE\x07u\x02\x02\xBE\xBF\x07' +
    'k\x02\x02\xBF\xC0\x07|\x02\x02\xC0\xC1\x07g\x02\x02\xC1\xC2\x07"\x02' +
    '\x02\xC2*\x03\x02\x02\x02\xC3\xC4\x07"\x02\x02\xC4\xC5\x07g\x02\x02\xC5' +
    '\xC6\x07o\x02\x02\xC6\xC7\x07r\x02\x02\xC7\xC8\x07v\x02\x02\xC8\xC9\x07' +
    '{\x02\x02\xC9,\x03\x02\x02\x02\xCA\xCB\x07#\x02\x02\xCB.\x03\x02\x02\x02' +
    '\xCC\xCD\x07~\x02\x02\xCD\xCE\x07~\x02\x02\xCE0\x03\x02\x02\x02\xCF\xD0' +
    '\x07v\x02\x02\xD0\xD1\x07t\x02\x02\xD1\xD2\x07w\x02\x02\xD2\xD3\x07g\x02' +
    '\x02\xD32\x03\x02\x02\x02\xD4\xD5\x07h\x02\x02\xD5\xD6\x07c\x02\x02\xD6' +
    '\xD7\x07n\x02\x02\xD7\xD8\x07u\x02\x02\xD8\xD9\x07g\x02\x02\xD94\x03\x02' +
    '\x02\x02\xDA\xDB\x07p\x02\x02\xDB\xDC\x07w\x02\x02\xDC\xDD\x07n\x02\x02' +
    '\xDD\xDE\x07n\x02\x02\xDE6\x03\x02\x02\x02\xDF\xE0\x07}\x02\x02\xE08\x03' +
    '\x02\x02\x02\xE1\xE2\x07\x7F\x02\x02\xE2:\x03\x02\x02\x02\xE3\xE4\x07' +
    ']\x02\x02\xE4<\x03\x02\x02\x02\xE5\xE6\x07_\x02\x02\xE6>\x03\x02\x02\x02' +
    '\xE7\xE8\x07<\x02\x02\xE8@\x03\x02\x02\x02\xE9\xEA\x07.\x02\x02\xEAB\x03' +
    '\x02\x02\x02\xEB\xEC\x07*\x02\x02\xECD\x03\x02\x02\x02\xED\xEE\x07+\x02' +
    '\x02\xEEF\x03\x02\x02\x02\xEF\xF0\x07A\x02\x02\xF0H\x03\x02\x02\x02\xF1' +
    '\xF2\x07/\x02\x02\xF2\xF3\x07"\x02\x02\xF3J\x03\x02\x02\x02\xF4\xF5\x07' +
    '-\x02\x02\xF5L\x03\x02\x02\x02\xF6\xF7\x071\x02\x02\xF7N\x03\x02\x02\x02' +
    '\xF8\xFA\t\x02\x02\x02\xF9\xF8\x03\x02\x02\x02\xFA\xFD\x03\x02\x02\x02' +
    '\xFB\xF9\x03\x02\x02\x02\xFB\xFC\x03\x02\x02\x02\xFCP\x03\x02\x02\x02' +
    '\xFD\xFB\x03\x02\x02\x02\xFE\u0102\x071\x02\x02\xFF\u0101\v\x02\x02\x02' +
    '\u0100\xFF\x03\x02\x02\x02\u0101\u0104\x03\x02\x02\x02\u0102\u0103\x03' +
    '\x02\x02\x02\u0102\u0100\x03\x02\x02\x02\u0103\u0105\x03\x02\x02\x02\u0104' +
    '\u0102\x03\x02\x02\x02\u0105\u0106\x071\x02\x02\u0106R\x03\x02\x02\x02' +
    '\u0107\u010B\t\x03\x02\x02\u0108\u010A\t\x04\x02\x02\u0109\u0108\x03\x02' +
    '\x02\x02\u010A\u010D\x03\x02\x02\x02\u010B\u0109\x03\x02\x02\x02\u010B' +
    '\u010C\x03\x02\x02\x02\u010CT\x03\x02\x02\x02\u010D\u010B\x03\x02\x02' +
    '\x02\u010E\u0113\x07$\x02\x02\u010F\u0112\x05Y-\x02\u0110\u0112\x05a1' +
    '\x02\u0111\u010F\x03\x02\x02\x02\u0111\u0110\x03\x02\x02\x02\u0112\u0115' +
    '\x03\x02\x02\x02\u0113\u0111\x03\x02\x02\x02\u0113\u0114\x03\x02\x02\x02' +
    '\u0114\u0116\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0116\u0121\x07' +
    '$\x02\x02\u0117\u011C\x07)\x02\x02\u0118\u011B\x05W,\x02\u0119\u011B\x05' +
    '_0\x02\u011A\u0118\x03\x02\x02\x02\u011A\u0119\x03\x02\x02\x02\u011B\u011E' +
    '\x03\x02\x02\x02\u011C\u011A\x03\x02\x02\x02\u011C\u011D\x03\x02\x02\x02' +
    '\u011D\u011F\x03\x02\x02\x02\u011E\u011C\x03\x02\x02\x02\u011F\u0121\x07' +
    ')\x02\x02\u0120\u010E\x03\x02\x02\x02\u0120\u0117\x03\x02\x02\x02\u0121' +
    'V\x03\x02\x02\x02\u0122\u0125\x07^\x02\x02\u0123\u0126\t\x05\x02\x02\u0124' +
    '\u0126\x05[.\x02\u0125\u0123\x03\x02\x02\x02\u0125\u0124\x03\x02\x02\x02' +
    '\u0126X\x03\x02\x02\x02\u0127\u012A\x07^\x02\x02\u0128\u012B\t\x06\x02' +
    '\x02\u0129\u012B\x05[.\x02\u012A\u0128\x03\x02\x02\x02\u012A\u0129\x03' +
    '\x02\x02\x02\u012BZ\x03\x02\x02\x02\u012C\u012D\x07w\x02\x02\u012D\u012E' +
    '\x05]/\x02\u012E\u012F\x05]/\x02\u012F\u0130\x05]/\x02\u0130\u0131\x05' +
    ']/\x02\u0131\\\x03\x02\x02\x02\u0132\u0133\t\x07\x02\x02\u0133^\x03\x02' +
    '\x02\x02\u0134\u0135\n\b\x02\x02\u0135`\x03\x02\x02\x02\u0136\u0137\n' +
    '\t\x02\x02\u0137b\x03\x02\x02\x02\u0138\u013A\x07/\x02\x02\u0139\u0138' +
    '\x03\x02\x02\x02\u0139\u013A\x03\x02\x02\x02\u013A\u013B\x03\x02\x02\x02' +
    '\u013B\u0142\x05e3\x02\u013C\u013E\x070\x02\x02\u013D\u013F\t\n\x02\x02' +
    '\u013E\u013D\x03\x02\x02\x02\u013F\u0140\x03\x02\x02\x02\u0140\u013E\x03' +
    '\x02\x02\x02\u0140\u0141\x03\x02\x02\x02\u0141\u0143\x03\x02\x02\x02\u0142' +
    '\u013C\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02\u0143\u0145\x03\x02' +
    '\x02\x02\u0144\u0146\x05g4\x02\u0145\u0144\x03\x02\x02\x02\u0145\u0146' +
    '\x03\x02\x02\x02\u0146d\x03\x02\x02\x02\u0147\u0150\x072\x02\x02\u0148' +
    '\u014C\t\v\x02\x02\u0149\u014B\t\n\x02\x02\u014A\u0149\x03\x02\x02\x02' +
    '\u014B\u014E\x03\x02\x02\x02\u014C\u014A\x03\x02\x02\x02\u014C\u014D\x03' +
    '\x02\x02\x02\u014D\u0150\x03\x02\x02\x02\u014E\u014C\x03\x02\x02\x02\u014F' +
    '\u0147\x03\x02\x02\x02\u014F\u0148\x03\x02\x02\x02\u0150f\x03\x02\x02' +
    '\x02\u0151\u0153\t\f\x02\x02\u0152\u0154\t\r\x02\x02\u0153\u0152\x03\x02' +
    '\x02\x02\u0153\u0154\x03\x02\x02\x02\u0154\u0155\x03\x02\x02\x02\u0155' +
    '\u0156\x05e3\x02\u0156h\x03\x02\x02\x02\u0157\u0159\t\x0E\x02\x02\u0158' +
    '\u0157\x03\x02\x02\x02\u0159\u015A\x03\x02\x02\x02\u015A\u0158\x03\x02' +
    '\x02\x02\u015A\u015B\x03\x02\x02\x02\u015B\u015C\x03\x02\x02\x02\u015C' +
    '\u015D\b5\x02\x02\u015Dj\x03\x02\x02\x02\x15\x02\xFB\u0102\u010B\u0111' +
    '\u0113\u011A\u011C\u0120\u0125\u012A\u0139\u0140\u0142\u0145\u014C\u014F' +
    '\u0153\u015A\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!JSONPathLexer.__ATN) {
      JSONPathLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONPathLexer._serializedATN));
    }

    return JSONPathLexer.__ATN;
  }
}
