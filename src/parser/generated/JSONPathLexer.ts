// Generated from ./src/parser/generated/JSONPath.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONPathLexer extends Lexer {
	public static readonly CURRENT_VALUE = 1;
	public static readonly RECURSIVE_DESCENT = 2;
	public static readonly ROOT_VALUE = 3;
	public static readonly SUBSCRIPT = 4;
	public static readonly WILDCARD = 5;
	public static readonly AND = 6;
	public static readonly EQ = 7;
	public static readonly GE = 8;
	public static readonly GT = 9;
	public static readonly LE = 10;
	public static readonly LT = 11;
	public static readonly NE = 12;
	public static readonly IN = 13;
	public static readonly NIN = 14;
	public static readonly SUB = 15;
	public static readonly ANY = 16;
	public static readonly NON = 17;
	public static readonly SIZ = 18;
	public static readonly NOT = 19;
	public static readonly OR = 20;
	public static readonly TRUE = 21;
	public static readonly FALSE = 22;
	public static readonly NULL = 23;
	public static readonly BRACE_LEFT = 24;
	public static readonly BRACE_RIGHT = 25;
	public static readonly BRACKET_LEFT = 26;
	public static readonly BRACKET_RIGHT = 27;
	public static readonly COLON = 28;
	public static readonly COMMA = 29;
	public static readonly PAREN_LEFT = 30;
	public static readonly PAREN_RIGHT = 31;
	public static readonly QUESTION = 32;
	public static readonly IDENTIFIER = 33;
	public static readonly STRING = 34;
	public static readonly NUMBER = 35;
	public static readonly WS = 36;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", "WILDCARD", 
		"AND", "EQ", "GE", "GT", "LE", "LT", "NE", "IN", "NIN", "SUB", "ANY", 
		"NON", "SIZ", "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT", "PAREN_RIGHT", 
		"QUESTION", "IDENTIFIER", "STRING", "ESC_SINGLE", "ESC_DOUBLE", "UNICODE", 
		"HEX", "SAFECODEPOINT_SINGLE", "SAFECODEPOINT_DOUBLE", "NUMBER", "INT", 
		"EXP", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'@'", "'..'", "'$'", "'.'", "'*'", "'&&'", "'=='", "'>='", 
		"'>'", "'<='", "'<'", "'!='", "'in'", "'nin'", "'subsetof'", "'anyof'", 
		"'noneof'", "'sizeof'", "'!'", "'||'", "'true'", "'false'", "'null'", 
		"'{'", "'}'", "'['", "']'", "':'", "','", "'('", "')'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", 
		"WILDCARD", "AND", "EQ", "GE", "GT", "LE", "LT", "NE", "IN", "NIN", "SUB", 
		"ANY", "NON", "SIZ", "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", 
		"BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT", 
		"PAREN_RIGHT", "QUESTION", "IDENTIFIER", "STRING", "NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONPathLexer._LITERAL_NAMES, JSONPathLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONPathLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONPathLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSONPath.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONPathLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONPathLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JSONPathLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JSONPathLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02&\u011B\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03" +
		"\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F" +
		"\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x07\"\xC7\n\"\f\"\x0E\"\xCA\v" +
		"\"\x03#\x03#\x03#\x07#\xCF\n#\f#\x0E#\xD2\v#\x03#\x03#\x03#\x03#\x07#" +
		"\xD8\n#\f#\x0E#\xDB\v#\x03#\x05#\xDE\n#\x03$\x03$\x03$\x05$\xE3\n$\x03" +
		"%\x03%\x03%\x05%\xE8\n%\x03&\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03" +
		"(\x03(\x03)\x03)\x03*\x05*\xF7\n*\x03*\x03*\x03*\x06*\xFC\n*\r*\x0E*\xFD" +
		"\x05*\u0100\n*\x03*\x05*\u0103\n*\x03+\x03+\x03+\x07+\u0108\n+\f+\x0E" +
		"+\u010B\v+\x05+\u010D\n+\x03,\x03,\x05,\u0111\n,\x03,\x03,\x03-\x06-\u0116" +
		"\n-\r-\x0E-\u0117\x03-\x03-\x02\x02\x02.\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12" +
		"#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02" +
		"\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C" +
		"\x02#E\x02$G\x02\x02I\x02\x02K\x02\x02M\x02\x02O\x02\x02Q\x02\x02S\x02" +
		"%U\x02\x02W\x02\x02Y\x02&\x03\x02\x0E\x05\x02C\\aac|\x06\x022;C\\aac|" +
		"\n\x02))11^^ddhhppttvv\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05\x02\x02" +
		"!))^^\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x05" +
		"\x02\v\f\x0F\x0F\"\"\x02\u0122\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02" +
		"\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02" +
		"\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02" +
		"\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02" +
		"\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02" +
		"\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02" +
		"\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+" +
		"\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03" +
		"\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02" +
		"\x02\x02S\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x03[\x03\x02\x02\x02\x05" +
		"]\x03\x02\x02\x02\x07`\x03\x02\x02\x02\tb\x03\x02\x02\x02\vd\x03\x02\x02" +
		"\x02\rf\x03\x02\x02\x02\x0Fi\x03\x02\x02\x02\x11l\x03\x02\x02\x02\x13" +
		"o\x03\x02\x02\x02\x15q\x03\x02\x02\x02\x17t\x03\x02\x02\x02\x19v\x03\x02" +
		"\x02\x02\x1By\x03\x02\x02\x02\x1D|\x03\x02\x02\x02\x1F\x80\x03\x02\x02" +
		"\x02!\x89\x03\x02\x02\x02#\x8F\x03\x02\x02\x02%\x96\x03\x02\x02\x02\'" +
		"\x9D\x03\x02\x02\x02)\x9F\x03\x02\x02\x02+\xA2\x03\x02\x02\x02-\xA7\x03" +
		"\x02\x02\x02/\xAD\x03\x02\x02\x021\xB2\x03\x02\x02\x023\xB4\x03\x02\x02" +
		"\x025\xB6\x03\x02\x02\x027\xB8\x03\x02\x02\x029\xBA\x03\x02\x02\x02;\xBC" +
		"\x03\x02\x02\x02=\xBE\x03\x02\x02\x02?\xC0\x03\x02\x02\x02A\xC2\x03\x02" +
		"\x02\x02C\xC4\x03\x02\x02\x02E\xDD\x03\x02\x02\x02G\xDF\x03\x02\x02\x02" +
		"I\xE4\x03\x02\x02\x02K\xE9\x03\x02\x02\x02M\xEF\x03\x02\x02\x02O\xF1\x03" +
		"\x02\x02\x02Q\xF3\x03\x02\x02\x02S\xF6\x03\x02\x02\x02U\u010C\x03\x02" +
		"\x02\x02W\u010E\x03\x02\x02\x02Y\u0115\x03\x02\x02\x02[\\\x07B\x02\x02" +
		"\\\x04\x03\x02\x02\x02]^\x070\x02\x02^_\x070\x02\x02_\x06\x03\x02\x02" +
		"\x02`a\x07&\x02\x02a\b\x03\x02\x02\x02bc\x070\x02\x02c\n\x03\x02\x02\x02" +
		"de\x07,\x02\x02e\f\x03\x02\x02\x02fg\x07(\x02\x02gh\x07(\x02\x02h\x0E" +
		"\x03\x02\x02\x02ij\x07?\x02\x02jk\x07?\x02\x02k\x10\x03\x02\x02\x02lm" +
		"\x07@\x02\x02mn\x07?\x02\x02n\x12\x03\x02\x02\x02op\x07@\x02\x02p\x14" +
		"\x03\x02\x02\x02qr\x07>\x02\x02rs\x07?\x02\x02s\x16\x03\x02\x02\x02tu" +
		"\x07>\x02\x02u\x18\x03\x02\x02\x02vw\x07#\x02\x02wx\x07?\x02\x02x\x1A" +
		"\x03\x02\x02\x02yz\x07k\x02\x02z{\x07p\x02\x02{\x1C\x03\x02\x02\x02|}" +
		"\x07p\x02\x02}~\x07k\x02\x02~\x7F\x07p\x02\x02\x7F\x1E\x03\x02\x02\x02" +
		"\x80\x81\x07u\x02\x02\x81\x82\x07w\x02\x02\x82\x83\x07d\x02\x02\x83\x84" +
		"\x07u\x02\x02\x84\x85\x07g\x02\x02\x85\x86\x07v\x02\x02\x86\x87\x07q\x02" +
		"\x02\x87\x88\x07h\x02\x02\x88 \x03\x02\x02\x02\x89\x8A\x07c\x02\x02\x8A" +
		"\x8B\x07p\x02\x02\x8B\x8C\x07{\x02\x02\x8C\x8D\x07q\x02\x02\x8D\x8E\x07" +
		"h\x02\x02\x8E\"\x03\x02\x02\x02\x8F\x90\x07p\x02\x02\x90\x91\x07q\x02" +
		"\x02\x91\x92\x07p\x02\x02\x92\x93\x07g\x02\x02\x93\x94\x07q\x02\x02\x94" +
		"\x95\x07h\x02\x02\x95$\x03\x02\x02\x02\x96\x97\x07u\x02\x02\x97\x98\x07" +
		"k\x02\x02\x98\x99\x07|\x02\x02\x99\x9A\x07g\x02\x02\x9A\x9B\x07q\x02\x02" +
		"\x9B\x9C\x07h\x02\x02\x9C&\x03\x02\x02\x02\x9D\x9E\x07#\x02\x02\x9E(\x03" +
		"\x02\x02\x02\x9F\xA0\x07~\x02\x02\xA0\xA1\x07~\x02\x02\xA1*\x03\x02\x02" +
		"\x02\xA2\xA3\x07v\x02\x02\xA3\xA4\x07t\x02\x02\xA4\xA5\x07w\x02\x02\xA5" +
		"\xA6\x07g\x02\x02\xA6,\x03\x02\x02\x02\xA7\xA8\x07h\x02\x02\xA8\xA9\x07" +
		"c\x02\x02\xA9\xAA\x07n\x02\x02\xAA\xAB\x07u\x02\x02\xAB\xAC\x07g\x02\x02" +
		"\xAC.\x03\x02\x02\x02\xAD\xAE\x07p\x02\x02\xAE\xAF\x07w\x02\x02\xAF\xB0" +
		"\x07n\x02\x02\xB0\xB1\x07n\x02\x02\xB10\x03\x02\x02\x02\xB2\xB3\x07}\x02" +
		"\x02\xB32\x03\x02\x02\x02\xB4\xB5\x07\x7F\x02\x02\xB54\x03\x02\x02\x02" +
		"\xB6\xB7\x07]\x02\x02\xB76\x03\x02\x02\x02\xB8\xB9\x07_\x02\x02\xB98\x03" +
		"\x02\x02\x02\xBA\xBB\x07<\x02\x02\xBB:\x03\x02\x02\x02\xBC\xBD\x07.\x02" +
		"\x02\xBD<\x03\x02\x02\x02\xBE\xBF\x07*\x02\x02\xBF>\x03\x02\x02\x02\xC0" +
		"\xC1\x07+\x02\x02\xC1@\x03\x02\x02\x02\xC2\xC3\x07A\x02\x02\xC3B\x03\x02" +
		"\x02\x02\xC4\xC8\t\x02\x02\x02\xC5\xC7\t\x03\x02\x02\xC6\xC5\x03\x02\x02" +
		"\x02\xC7\xCA\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC8\xC9\x03\x02\x02" +
		"\x02\xC9D\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCB\xD0\x07$\x02\x02" +
		"\xCC\xCF\x05I%\x02\xCD\xCF\x05Q)\x02\xCE\xCC\x03\x02\x02\x02\xCE\xCD\x03" +
		"\x02\x02\x02\xCF\xD2\x03\x02\x02\x02\xD0\xCE\x03\x02\x02\x02\xD0\xD1\x03" +
		"\x02\x02\x02\xD1\xD3\x03\x02\x02\x02\xD2\xD0\x03\x02\x02\x02\xD3\xDE\x07" +
		"$\x02\x02\xD4\xD9\x07)\x02\x02\xD5\xD8\x05G$\x02\xD6\xD8\x05O(\x02\xD7" +
		"\xD5\x03\x02\x02\x02\xD7\xD6\x03\x02\x02\x02\xD8\xDB\x03\x02\x02\x02\xD9" +
		"\xD7\x03\x02\x02\x02\xD9\xDA\x03\x02\x02\x02\xDA\xDC\x03\x02\x02\x02\xDB" +
		"\xD9\x03\x02\x02\x02\xDC\xDE\x07)\x02\x02\xDD\xCB\x03\x02\x02\x02\xDD" +
		"\xD4\x03\x02\x02\x02\xDEF\x03\x02\x02\x02\xDF\xE2\x07^\x02\x02\xE0\xE3" +
		"\t\x04\x02\x02\xE1\xE3\x05K&\x02\xE2\xE0\x03\x02\x02\x02\xE2\xE1\x03\x02" +
		"\x02\x02\xE3H\x03\x02\x02\x02\xE4\xE7\x07^\x02\x02\xE5\xE8\t\x05\x02\x02" +
		"\xE6\xE8\x05K&\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE6\x03\x02\x02\x02\xE8" +
		"J\x03\x02\x02\x02\xE9\xEA\x07w\x02\x02\xEA\xEB\x05M\'\x02\xEB\xEC\x05" +
		"M\'\x02\xEC\xED\x05M\'\x02\xED\xEE\x05M\'\x02\xEEL\x03\x02\x02\x02\xEF" +
		"\xF0\t\x06\x02\x02\xF0N\x03\x02\x02\x02\xF1\xF2\n\x07\x02\x02\xF2P\x03" +
		"\x02\x02\x02\xF3\xF4\n\b\x02\x02\xF4R\x03\x02\x02\x02\xF5\xF7\x07/\x02" +
		"\x02\xF6\xF5\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\xF8\x03\x02\x02" +
		"\x02\xF8\xFF\x05U+\x02\xF9\xFB\x070\x02\x02\xFA\xFC\t\t\x02\x02\xFB\xFA" +
		"\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFB\x03\x02\x02\x02\xFD\xFE" +
		"\x03\x02\x02\x02\xFE\u0100\x03\x02\x02\x02\xFF\xF9\x03\x02\x02\x02\xFF" +
		"\u0100\x03\x02\x02\x02\u0100\u0102\x03\x02\x02\x02\u0101\u0103\x05W,\x02" +
		"\u0102\u0101\x03\x02\x02\x02\u0102\u0103\x03\x02\x02\x02\u0103T\x03\x02" +
		"\x02\x02\u0104\u010D\x072\x02\x02\u0105\u0109\t\n\x02\x02\u0106\u0108" +
		"\t\t\x02\x02\u0107\u0106\x03\x02\x02\x02\u0108\u010B\x03\x02\x02\x02\u0109" +
		"\u0107\x03\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A\u010D\x03\x02" +
		"\x02\x02\u010B\u0109\x03\x02\x02\x02\u010C\u0104\x03\x02\x02\x02\u010C" +
		"\u0105\x03\x02\x02\x02\u010DV\x03\x02\x02\x02\u010E\u0110\t\v\x02\x02" +
		"\u010F\u0111\t\f\x02\x02\u0110\u010F\x03\x02\x02\x02\u0110\u0111\x03\x02" +
		"\x02\x02\u0111\u0112\x03\x02\x02\x02\u0112\u0113\x05U+\x02\u0113X\x03" +
		"\x02\x02\x02\u0114\u0116\t\r\x02\x02\u0115\u0114\x03\x02\x02\x02\u0116" +
		"\u0117\x03\x02\x02\x02\u0117\u0115\x03\x02\x02\x02\u0117\u0118\x03\x02" +
		"\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119\u011A\b-\x02\x02\u011AZ\x03" +
		"\x02\x02\x02\x13\x02\xC8\xCE\xD0\xD7\xD9\xDD\xE2\xE7\xF6\xFD\xFF\u0102" +
		"\u0109\u010C\u0110\u0117\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONPathLexer.__ATN) {
			JSONPathLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONPathLexer._serializedATN));
		}

		return JSONPathLexer.__ATN;
	}

}

