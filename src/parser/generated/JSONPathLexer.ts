// Generated from ./src/parser/generated/JSONPath.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONPathLexer extends Lexer {
	public static readonly CURRENT_VALUE = 1;
	public static readonly RECURSIVE_DESCENT = 2;
	public static readonly ROOT_VALUE = 3;
	public static readonly SUBSCRIPT = 4;
	public static readonly WILDCARD = 5;
	public static readonly AND = 6;
	public static readonly EQ = 7;
	public static readonly GE = 8;
	public static readonly GT = 9;
	public static readonly LE = 10;
	public static readonly LT = 11;
	public static readonly NE = 12;
	public static readonly IN = 13;
	public static readonly NIN = 14;
	public static readonly SUB = 15;
	public static readonly ANY = 16;
	public static readonly NON = 17;
	public static readonly SIZO = 18;
	public static readonly SIZ = 19;
	public static readonly NOT = 20;
	public static readonly OR = 21;
	public static readonly TRUE = 22;
	public static readonly FALSE = 23;
	public static readonly NULL = 24;
	public static readonly BRACE_LEFT = 25;
	public static readonly BRACE_RIGHT = 26;
	public static readonly BRACKET_LEFT = 27;
	public static readonly BRACKET_RIGHT = 28;
	public static readonly COLON = 29;
	public static readonly COMMA = 30;
	public static readonly PAREN_LEFT = 31;
	public static readonly PAREN_RIGHT = 32;
	public static readonly QUESTION = 33;
	public static readonly IDENTIFIER = 34;
	public static readonly STRING = 35;
	public static readonly NUMBER = 36;
	public static readonly WS = 37;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", "WILDCARD", 
		"AND", "EQ", "GE", "GT", "LE", "LT", "NE", "IN", "NIN", "SUB", "ANY", 
		"NON", "SIZO", "SIZ", "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", 
		"BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT", 
		"PAREN_RIGHT", "QUESTION", "IDENTIFIER", "STRING", "ESC_SINGLE", "ESC_DOUBLE", 
		"UNICODE", "HEX", "SAFECODEPOINT_SINGLE", "SAFECODEPOINT_DOUBLE", "NUMBER", 
		"INT", "EXP", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'@'", "'..'", "'$'", "'.'", "'*'", "'&&'", "'=='", "'>='", 
		"'>'", "'<='", "'<'", "'!='", "' in '", "' nin '", "' subsetof '", "' anyof '", 
		"' noneof '", "' sizeof '", "' size '", "'!'", "'||'", "'true'", "'false'", 
		"'null'", "'{'", "'}'", "'['", "']'", "':'", "','", "'('", "')'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", 
		"WILDCARD", "AND", "EQ", "GE", "GT", "LE", "LT", "NE", "IN", "NIN", "SUB", 
		"ANY", "NON", "SIZO", "SIZ", "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", 
		"BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT", 
		"PAREN_RIGHT", "QUESTION", "IDENTIFIER", "STRING", "NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONPathLexer._LITERAL_NAMES, JSONPathLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONPathLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONPathLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSONPath.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONPathLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONPathLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JSONPathLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JSONPathLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\'\u0130\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03" +
		"\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03" +
		"\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x07#\xDC\n#\f#\x0E#\xDF" +
		"\v#\x03$\x03$\x03$\x07$\xE4\n$\f$\x0E$\xE7\v$\x03$\x03$\x03$\x03$\x07" +
		"$\xED\n$\f$\x0E$\xF0\v$\x03$\x05$\xF3\n$\x03%\x03%\x03%\x05%\xF8\n%\x03" +
		"&\x03&\x03&\x05&\xFD\n&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03(\x03(" +
		"\x03)\x03)\x03*\x03*\x03+\x05+\u010C\n+\x03+\x03+\x03+\x06+\u0111\n+\r" +
		"+\x0E+\u0112\x05+\u0115\n+\x03+\x05+\u0118\n+\x03,\x03,\x03,\x07,\u011D" +
		"\n,\f,\x0E,\u0120\v,\x05,\u0122\n,\x03-\x03-\x05-\u0126\n-\x03-\x03-\x03" +
		".\x06.\u012B\n.\r.\x0E.\u012C\x03.\x03.\x02\x02\x02/\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11" +
		"!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02" +
		"\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02" +
		"!A\x02\"C\x02#E\x02$G\x02%I\x02\x02K\x02\x02M\x02\x02O\x02\x02Q\x02\x02" +
		"S\x02\x02U\x02&W\x02\x02Y\x02\x02[\x02\'\x03\x02\x0E\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\n\x02))11^^ddhhppttvv\n\x02$$11^^ddhhppttvv\x05\x022;CH" +
		"ch\x05\x02\x02!))^^\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04" +
		"\x02--//\x05\x02\v\f\x0F\x0F\"\"\x02\u0137\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02" +
		"\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02" +
		"\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03" +
		"\x02\x02\x02\x02G\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02[\x03\x02\x02" +
		"\x02\x03]\x03\x02\x02\x02\x05_\x03\x02\x02\x02\x07b\x03\x02\x02\x02\t" +
		"d\x03\x02\x02\x02\vf\x03\x02\x02\x02\rh\x03\x02\x02\x02\x0Fk\x03\x02\x02" +
		"\x02\x11n\x03\x02\x02\x02\x13q\x03\x02\x02\x02\x15s\x03\x02\x02\x02\x17" +
		"v\x03\x02\x02\x02\x19x\x03\x02\x02\x02\x1B{\x03\x02\x02\x02\x1D\x80\x03" +
		"\x02\x02\x02\x1F\x86\x03\x02\x02\x02!\x91\x03\x02\x02\x02#\x99\x03\x02" +
		"\x02\x02%\xA2\x03\x02\x02\x02\'\xAB\x03\x02\x02\x02)\xB2\x03\x02\x02\x02" +
		"+\xB4\x03\x02\x02\x02-\xB7\x03\x02\x02\x02/\xBC\x03\x02\x02\x021\xC2\x03" +
		"\x02\x02\x023\xC7\x03\x02\x02\x025\xC9\x03\x02\x02\x027\xCB\x03\x02\x02" +
		"\x029\xCD\x03\x02\x02\x02;\xCF\x03\x02\x02\x02=\xD1\x03\x02\x02\x02?\xD3" +
		"\x03\x02\x02\x02A\xD5\x03\x02\x02\x02C\xD7\x03\x02\x02\x02E\xD9\x03\x02" +
		"\x02\x02G\xF2\x03\x02\x02\x02I\xF4\x03\x02\x02\x02K\xF9\x03\x02\x02\x02" +
		"M\xFE\x03\x02\x02\x02O\u0104\x03\x02\x02\x02Q\u0106\x03\x02\x02\x02S\u0108" +
		"\x03\x02\x02\x02U\u010B\x03\x02\x02\x02W\u0121\x03\x02\x02\x02Y\u0123" +
		"\x03\x02\x02\x02[\u012A\x03\x02\x02\x02]^\x07B\x02\x02^\x04\x03\x02\x02" +
		"\x02_`\x070\x02\x02`a\x070\x02\x02a\x06\x03\x02\x02\x02bc\x07&\x02\x02" +
		"c\b\x03\x02\x02\x02de\x070\x02\x02e\n\x03\x02\x02\x02fg\x07,\x02\x02g" +
		"\f\x03\x02\x02\x02hi\x07(\x02\x02ij\x07(\x02\x02j\x0E\x03\x02\x02\x02" +
		"kl\x07?\x02\x02lm\x07?\x02\x02m\x10\x03\x02\x02\x02no\x07@\x02\x02op\x07" +
		"?\x02\x02p\x12\x03\x02\x02\x02qr\x07@\x02\x02r\x14\x03\x02\x02\x02st\x07" +
		">\x02\x02tu\x07?\x02\x02u\x16\x03\x02\x02\x02vw\x07>\x02\x02w\x18\x03" +
		"\x02\x02\x02xy\x07#\x02\x02yz\x07?\x02\x02z\x1A\x03\x02\x02\x02{|\x07" +
		"\"\x02\x02|}\x07k\x02\x02}~\x07p\x02\x02~\x7F\x07\"\x02\x02\x7F\x1C\x03" +
		"\x02\x02\x02\x80\x81\x07\"\x02\x02\x81\x82\x07p\x02\x02\x82\x83\x07k\x02" +
		"\x02\x83\x84\x07p\x02\x02\x84\x85\x07\"\x02\x02\x85\x1E\x03\x02\x02\x02" +
		"\x86\x87\x07\"\x02\x02\x87\x88\x07u\x02\x02\x88\x89\x07w\x02\x02\x89\x8A" +
		"\x07d\x02\x02\x8A\x8B\x07u\x02\x02\x8B\x8C\x07g\x02\x02\x8C\x8D\x07v\x02" +
		"\x02\x8D\x8E\x07q\x02\x02\x8E\x8F\x07h\x02\x02\x8F\x90\x07\"\x02\x02\x90" +
		" \x03\x02\x02\x02\x91\x92\x07\"\x02\x02\x92\x93\x07c\x02\x02\x93\x94\x07" +
		"p\x02\x02\x94\x95\x07{\x02\x02\x95\x96\x07q\x02\x02\x96\x97\x07h\x02\x02" +
		"\x97\x98\x07\"\x02\x02\x98\"\x03\x02\x02\x02\x99\x9A\x07\"\x02\x02\x9A" +
		"\x9B\x07p\x02\x02\x9B\x9C\x07q\x02\x02\x9C\x9D\x07p\x02\x02\x9D\x9E\x07" +
		"g\x02\x02\x9E\x9F\x07q\x02\x02\x9F\xA0\x07h\x02\x02\xA0\xA1\x07\"\x02" +
		"\x02\xA1$\x03\x02\x02\x02\xA2\xA3\x07\"\x02\x02\xA3\xA4\x07u\x02\x02\xA4" +
		"\xA5\x07k\x02\x02\xA5\xA6\x07|\x02\x02\xA6\xA7\x07g\x02\x02\xA7\xA8\x07" +
		"q\x02\x02\xA8\xA9\x07h\x02\x02\xA9\xAA\x07\"\x02\x02\xAA&\x03\x02\x02" +
		"\x02\xAB\xAC\x07\"\x02\x02\xAC\xAD\x07u\x02\x02\xAD\xAE\x07k\x02\x02\xAE" +
		"\xAF\x07|\x02\x02\xAF\xB0\x07g\x02\x02\xB0\xB1\x07\"\x02\x02\xB1(\x03" +
		"\x02\x02\x02\xB2\xB3\x07#\x02\x02\xB3*\x03\x02\x02\x02\xB4\xB5\x07~\x02" +
		"\x02\xB5\xB6\x07~\x02\x02\xB6,\x03\x02\x02\x02\xB7\xB8\x07v\x02\x02\xB8" +
		"\xB9\x07t\x02\x02\xB9\xBA\x07w\x02\x02\xBA\xBB\x07g\x02\x02\xBB.\x03\x02" +
		"\x02\x02\xBC\xBD\x07h\x02\x02\xBD\xBE\x07c\x02\x02\xBE\xBF\x07n\x02\x02" +
		"\xBF\xC0\x07u\x02\x02\xC0\xC1\x07g\x02\x02\xC10\x03\x02\x02\x02\xC2\xC3" +
		"\x07p\x02\x02\xC3\xC4\x07w\x02\x02\xC4\xC5\x07n\x02\x02\xC5\xC6\x07n\x02" +
		"\x02\xC62\x03\x02\x02\x02\xC7\xC8\x07}\x02\x02\xC84\x03\x02\x02\x02\xC9" +
		"\xCA\x07\x7F\x02\x02\xCA6\x03\x02\x02\x02\xCB\xCC\x07]\x02\x02\xCC8\x03" +
		"\x02\x02\x02\xCD\xCE\x07_\x02\x02\xCE:\x03\x02\x02\x02\xCF\xD0\x07<\x02" +
		"\x02\xD0<\x03\x02\x02\x02\xD1\xD2\x07.\x02\x02\xD2>\x03\x02\x02\x02\xD3" +
		"\xD4\x07*\x02\x02\xD4@\x03\x02\x02\x02\xD5\xD6\x07+\x02\x02\xD6B\x03\x02" +
		"\x02\x02\xD7\xD8\x07A\x02\x02\xD8D\x03\x02\x02\x02\xD9\xDD\t\x02\x02\x02" +
		"\xDA\xDC\t\x03\x02\x02\xDB\xDA\x03\x02\x02\x02\xDC\xDF\x03\x02\x02\x02" +
		"\xDD\xDB\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDEF\x03\x02\x02\x02" +
		"\xDF\xDD\x03\x02\x02\x02\xE0\xE5\x07$\x02\x02\xE1\xE4\x05K&\x02\xE2\xE4" +
		"\x05S*\x02\xE3\xE1\x03\x02\x02\x02\xE3\xE2\x03\x02\x02\x02\xE4\xE7\x03" +
		"\x02\x02\x02\xE5\xE3\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE8\x03" +
		"\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE8\xF3\x07$\x02\x02\xE9\xEE\x07" +
		")\x02\x02\xEA\xED\x05I%\x02\xEB\xED\x05Q)\x02\xEC\xEA\x03\x02\x02\x02" +
		"\xEC\xEB\x03\x02\x02\x02\xED\xF0\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02" +
		"\xEE\xEF\x03\x02\x02\x02\xEF\xF1\x03\x02\x02\x02\xF0\xEE\x03\x02\x02\x02" +
		"\xF1\xF3\x07)\x02\x02\xF2\xE0\x03\x02\x02\x02\xF2\xE9\x03\x02\x02\x02" +
		"\xF3H\x03\x02\x02\x02\xF4\xF7\x07^\x02\x02\xF5\xF8\t\x04\x02\x02\xF6\xF8" +
		"\x05M\'\x02\xF7\xF5\x03\x02\x02\x02\xF7\xF6\x03\x02\x02\x02\xF8J\x03\x02" +
		"\x02\x02\xF9\xFC\x07^\x02\x02\xFA\xFD\t\x05\x02\x02\xFB\xFD\x05M\'\x02" +
		"\xFC\xFA\x03\x02\x02\x02\xFC\xFB\x03\x02\x02\x02\xFDL\x03\x02\x02\x02" +
		"\xFE\xFF\x07w\x02\x02\xFF\u0100\x05O(\x02\u0100\u0101\x05O(\x02\u0101" +
		"\u0102\x05O(\x02\u0102\u0103\x05O(\x02\u0103N\x03\x02\x02\x02\u0104\u0105" +
		"\t\x06\x02\x02\u0105P\x03\x02\x02\x02\u0106\u0107\n\x07\x02\x02\u0107" +
		"R\x03\x02\x02\x02\u0108\u0109\n\b\x02\x02\u0109T\x03\x02\x02\x02\u010A" +
		"\u010C\x07/\x02\x02\u010B\u010A\x03\x02\x02\x02\u010B\u010C\x03\x02\x02" +
		"\x02\u010C\u010D\x03\x02\x02\x02\u010D\u0114\x05W,\x02\u010E\u0110\x07" +
		"0\x02\x02\u010F\u0111\t\t\x02\x02\u0110\u010F\x03\x02\x02\x02\u0111\u0112" +
		"\x03\x02\x02\x02\u0112\u0110\x03\x02\x02\x02\u0112\u0113\x03\x02\x02\x02" +
		"\u0113\u0115\x03\x02\x02\x02\u0114\u010E\x03\x02\x02\x02\u0114\u0115\x03" +
		"\x02\x02\x02\u0115\u0117\x03\x02\x02\x02\u0116\u0118\x05Y-\x02\u0117\u0116" +
		"\x03\x02\x02\x02\u0117\u0118\x03\x02\x02\x02\u0118V\x03\x02\x02\x02\u0119" +
		"\u0122\x072\x02\x02\u011A\u011E\t\n\x02\x02\u011B\u011D\t\t\x02\x02\u011C" +
		"\u011B\x03\x02\x02\x02\u011D\u0120\x03\x02\x02\x02\u011E\u011C\x03\x02" +
		"\x02\x02\u011E\u011F\x03\x02\x02\x02\u011F\u0122\x03\x02\x02\x02\u0120" +
		"\u011E\x03\x02\x02\x02\u0121\u0119\x03\x02\x02\x02\u0121\u011A\x03\x02" +
		"\x02\x02\u0122X\x03\x02\x02\x02\u0123\u0125\t\v\x02\x02\u0124\u0126\t" +
		"\f\x02\x02\u0125\u0124\x03\x02\x02\x02\u0125\u0126\x03\x02\x02\x02\u0126" +
		"\u0127\x03\x02\x02\x02\u0127\u0128\x05W,\x02\u0128Z\x03\x02\x02\x02\u0129" +
		"\u012B\t\r\x02\x02\u012A\u0129\x03\x02\x02\x02\u012B\u012C\x03\x02\x02" +
		"\x02\u012C\u012A\x03\x02\x02\x02\u012C\u012D\x03\x02\x02\x02\u012D\u012E" +
		"\x03\x02\x02\x02\u012E\u012F\b.\x02\x02\u012F\\\x03\x02\x02\x02\x13\x02" +
		"\xDD\xE3\xE5\xEC\xEE\xF2\xF7\xFC\u010B\u0112\u0114\u0117\u011E\u0121\u0125" +
		"\u012C\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONPathLexer.__ATN) {
			JSONPathLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONPathLexer._serializedATN));
		}

		return JSONPathLexer.__ATN;
	}

}

