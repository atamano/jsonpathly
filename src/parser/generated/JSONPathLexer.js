// Generated from src/parser/generated/JSONPath.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,45,348,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,
1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,
1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
1,38,1,38,1,39,5,39,253,8,39,10,39,12,39,256,9,39,1,40,1,40,5,40,260,8,40,
10,40,12,40,263,9,40,1,40,1,40,1,41,1,41,5,41,269,8,41,10,41,12,41,272,9,
41,1,42,4,42,275,8,42,11,42,12,42,276,1,42,1,42,1,43,3,43,282,8,43,1,43,
1,43,1,43,4,43,287,8,43,11,43,12,43,288,3,43,291,8,43,1,43,3,43,294,8,43,
1,44,1,44,1,44,5,44,299,8,44,10,44,12,44,302,9,44,1,44,1,44,1,44,1,44,5,
44,308,8,44,10,44,12,44,311,9,44,1,44,3,44,314,8,44,1,45,1,45,1,45,3,45,
319,8,45,1,46,1,46,1,46,3,46,324,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,
1,48,1,49,1,49,1,50,1,50,1,51,4,51,339,8,51,11,51,12,51,340,1,52,1,52,3,
52,345,8,52,1,52,1,52,1,261,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,1,0,12,6,0,103,103,105,105,109,
109,115,115,117,117,121,121,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
97,122,3,0,9,10,13,13,32,32,1,0,48,57,8,0,39,39,47,47,92,92,98,98,102,102,
110,110,114,114,116,116,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,
114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,39,39,92,92,3,0,0,31,34,34,92,
92,2,0,69,69,101,101,2,0,43,43,45,45,356,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,107,1,0,0,0,3,110,1,0,0,0,5,112,
1,0,0,0,7,115,1,0,0,0,9,117,1,0,0,0,11,119,1,0,0,0,13,121,1,0,0,0,15,124,
1,0,0,0,17,127,1,0,0,0,19,130,1,0,0,0,21,132,1,0,0,0,23,135,1,0,0,0,25,137,
1,0,0,0,27,140,1,0,0,0,29,143,1,0,0,0,31,148,1,0,0,0,33,154,1,0,0,0,35,165,
1,0,0,0,37,173,1,0,0,0,39,182,1,0,0,0,41,191,1,0,0,0,43,198,1,0,0,0,45,205,
1,0,0,0,47,207,1,0,0,0,49,210,1,0,0,0,51,215,1,0,0,0,53,221,1,0,0,0,55,226,
1,0,0,0,57,228,1,0,0,0,59,230,1,0,0,0,61,232,1,0,0,0,63,234,1,0,0,0,65,236,
1,0,0,0,67,238,1,0,0,0,69,240,1,0,0,0,71,242,1,0,0,0,73,244,1,0,0,0,75,247,
1,0,0,0,77,249,1,0,0,0,79,254,1,0,0,0,81,257,1,0,0,0,83,266,1,0,0,0,85,274,
1,0,0,0,87,281,1,0,0,0,89,313,1,0,0,0,91,315,1,0,0,0,93,320,1,0,0,0,95,325,
1,0,0,0,97,331,1,0,0,0,99,333,1,0,0,0,101,335,1,0,0,0,103,338,1,0,0,0,105,
342,1,0,0,0,107,108,5,92,0,0,108,109,5,39,0,0,109,2,1,0,0,0,110,111,5,64,
0,0,111,4,1,0,0,0,112,113,5,46,0,0,113,114,5,46,0,0,114,6,1,0,0,0,115,116,
5,36,0,0,116,8,1,0,0,0,117,118,5,46,0,0,118,10,1,0,0,0,119,120,5,42,0,0,
120,12,1,0,0,0,121,122,5,38,0,0,122,123,5,38,0,0,123,14,1,0,0,0,124,125,
5,61,0,0,125,126,5,61,0,0,126,16,1,0,0,0,127,128,5,62,0,0,128,129,5,61,0,
0,129,18,1,0,0,0,130,131,5,62,0,0,131,20,1,0,0,0,132,133,5,60,0,0,133,134,
5,61,0,0,134,22,1,0,0,0,135,136,5,60,0,0,136,24,1,0,0,0,137,138,5,33,0,0,
138,139,5,61,0,0,139,26,1,0,0,0,140,141,5,61,0,0,141,142,5,126,0,0,142,28,
1,0,0,0,143,144,5,32,0,0,144,145,5,105,0,0,145,146,5,110,0,0,146,147,5,32,
0,0,147,30,1,0,0,0,148,149,5,32,0,0,149,150,5,110,0,0,150,151,5,105,0,0,
151,152,5,110,0,0,152,153,5,32,0,0,153,32,1,0,0,0,154,155,5,32,0,0,155,156,
5,115,0,0,156,157,5,117,0,0,157,158,5,98,0,0,158,159,5,115,0,0,159,160,5,
101,0,0,160,161,5,116,0,0,161,162,5,111,0,0,162,163,5,102,0,0,163,164,5,
32,0,0,164,34,1,0,0,0,165,166,5,32,0,0,166,167,5,97,0,0,167,168,5,110,0,
0,168,169,5,121,0,0,169,170,5,111,0,0,170,171,5,102,0,0,171,172,5,32,0,0,
172,36,1,0,0,0,173,174,5,32,0,0,174,175,5,110,0,0,175,176,5,111,0,0,176,
177,5,110,0,0,177,178,5,101,0,0,178,179,5,111,0,0,179,180,5,102,0,0,180,
181,5,32,0,0,181,38,1,0,0,0,182,183,5,32,0,0,183,184,5,115,0,0,184,185,5,
105,0,0,185,186,5,122,0,0,186,187,5,101,0,0,187,188,5,111,0,0,188,189,5,
102,0,0,189,190,5,32,0,0,190,40,1,0,0,0,191,192,5,32,0,0,192,193,5,115,0,
0,193,194,5,105,0,0,194,195,5,122,0,0,195,196,5,101,0,0,196,197,5,32,0,0,
197,42,1,0,0,0,198,199,5,32,0,0,199,200,5,101,0,0,200,201,5,109,0,0,201,
202,5,112,0,0,202,203,5,116,0,0,203,204,5,121,0,0,204,44,1,0,0,0,205,206,
5,33,0,0,206,46,1,0,0,0,207,208,5,124,0,0,208,209,5,124,0,0,209,48,1,0,0,
0,210,211,5,116,0,0,211,212,5,114,0,0,212,213,5,117,0,0,213,214,5,101,0,
0,214,50,1,0,0,0,215,216,5,102,0,0,216,217,5,97,0,0,217,218,5,108,0,0,218,
219,5,115,0,0,219,220,5,101,0,0,220,52,1,0,0,0,221,222,5,110,0,0,222,223,
5,117,0,0,223,224,5,108,0,0,224,225,5,108,0,0,225,54,1,0,0,0,226,227,5,123,
0,0,227,56,1,0,0,0,228,229,5,125,0,0,229,58,1,0,0,0,230,231,5,91,0,0,231,
60,1,0,0,0,232,233,5,93,0,0,233,62,1,0,0,0,234,235,5,58,0,0,235,64,1,0,0,
0,236,237,5,44,0,0,237,66,1,0,0,0,238,239,5,40,0,0,239,68,1,0,0,0,240,241,
5,41,0,0,241,70,1,0,0,0,242,243,5,63,0,0,243,72,1,0,0,0,244,245,5,45,0,0,
245,246,5,32,0,0,246,74,1,0,0,0,247,248,5,43,0,0,248,76,1,0,0,0,249,250,
5,47,0,0,250,78,1,0,0,0,251,253,7,0,0,0,252,251,1,0,0,0,253,256,1,0,0,0,
254,252,1,0,0,0,254,255,1,0,0,0,255,80,1,0,0,0,256,254,1,0,0,0,257,261,5,
47,0,0,258,260,9,0,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,262,1,0,0,0,261,
259,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,265,5,47,0,0,265,82,1,0,
0,0,266,270,7,1,0,0,267,269,7,2,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,
268,1,0,0,0,270,271,1,0,0,0,271,84,1,0,0,0,272,270,1,0,0,0,273,275,7,3,0,
0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,278,
1,0,0,0,278,279,6,42,0,0,279,86,1,0,0,0,280,282,5,45,0,0,281,280,1,0,0,0,
281,282,1,0,0,0,282,283,1,0,0,0,283,290,3,103,51,0,284,286,5,46,0,0,285,
287,7,4,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,289,1,0,
0,0,289,291,1,0,0,0,290,284,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,
294,3,105,52,0,293,292,1,0,0,0,293,294,1,0,0,0,294,88,1,0,0,0,295,300,5,
34,0,0,296,299,3,93,46,0,297,299,3,101,50,0,298,296,1,0,0,0,298,297,1,0,
0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,
300,1,0,0,0,303,314,5,34,0,0,304,309,5,39,0,0,305,308,3,91,45,0,306,308,
3,99,49,0,307,305,1,0,0,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,
0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,314,5,39,0,0,313,295,
1,0,0,0,313,304,1,0,0,0,314,90,1,0,0,0,315,318,5,92,0,0,316,319,7,5,0,0,
317,319,3,95,47,0,318,316,1,0,0,0,318,317,1,0,0,0,319,92,1,0,0,0,320,323,
5,92,0,0,321,324,7,6,0,0,322,324,3,95,47,0,323,321,1,0,0,0,323,322,1,0,0,
0,324,94,1,0,0,0,325,326,5,117,0,0,326,327,3,97,48,0,327,328,3,97,48,0,328,
329,3,97,48,0,329,330,3,97,48,0,330,96,1,0,0,0,331,332,7,7,0,0,332,98,1,
0,0,0,333,334,8,8,0,0,334,100,1,0,0,0,335,336,8,9,0,0,336,102,1,0,0,0,337,
339,7,4,0,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,1,0,
0,0,341,104,1,0,0,0,342,344,7,10,0,0,343,345,7,11,0,0,344,343,1,0,0,0,344,
345,1,0,0,0,345,346,1,0,0,0,346,347,3,103,51,0,347,106,1,0,0,0,18,0,254,
261,270,276,281,288,290,293,298,300,307,309,313,318,323,340,344,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class JSONPathLexer extends antlr4.Lexer {

    static grammarFileName = "JSONPath.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\''", "'@'", "'..'", "'$'", "'.'", "'*'", 
                         "'&&'", "'=='", "'>='", "'>'", "'<='", "'<'", "'!='", 
                         "'=~'", "' in '", "' nin '", "' subsetof '", "' anyof '", 
                         "' noneof '", "' sizeof '", "' size '", "' empty'", 
                         "'!'", "'||'", "'true'", "'false'", "'null'", "'{'", 
                         "'}'", "'['", "']'", "':'", "','", "'('", "')'", 
                         "'?'", "'- '", "'+'", "'/'" ];
	static symbolicNames = [ null, null, "CURRENT_VALUE", "DOTDOT", "ROOT_VALUE", 
                          "DOT", "STAR", "AND", "EQ", "GE", "GT", "LE", 
                          "LT", "NE", "REG", "IN", "NIN", "SUB", "ANY", 
                          "NON", "SIZO", "SIZ", "EMPT", "NOT", "OR", "TRUE", 
                          "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", 
                          "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", 
                          "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", "MINUS_SP", 
                          "PLUS", "DIV", "REGEX_OPT", "REGEX_EXPR", "KEY", 
                          "WS", "NUMBER", "STRING" ];
	static ruleNames = [ "T__0", "CURRENT_VALUE", "DOTDOT", "ROOT_VALUE", "DOT", 
                      "STAR", "AND", "EQ", "GE", "GT", "LE", "LT", "NE", 
                      "REG", "IN", "NIN", "SUB", "ANY", "NON", "SIZO", "SIZ", 
                      "EMPT", "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", 
                      "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", 
                      "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", 
                      "MINUS_SP", "PLUS", "DIV", "REGEX_OPT", "REGEX_EXPR", 
                      "KEY", "WS", "NUMBER", "STRING", "ESC_SINGLE", "ESC_DOUBLE", 
                      "UNICODE", "HEX", "SAFECODEPOINT_SINGLE", "SAFECODEPOINT_DOUBLE", 
                      "INT", "EXP" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

JSONPathLexer.EOF = antlr4.Token.EOF;
JSONPathLexer.T__0 = 1;
JSONPathLexer.CURRENT_VALUE = 2;
JSONPathLexer.DOTDOT = 3;
JSONPathLexer.ROOT_VALUE = 4;
JSONPathLexer.DOT = 5;
JSONPathLexer.STAR = 6;
JSONPathLexer.AND = 7;
JSONPathLexer.EQ = 8;
JSONPathLexer.GE = 9;
JSONPathLexer.GT = 10;
JSONPathLexer.LE = 11;
JSONPathLexer.LT = 12;
JSONPathLexer.NE = 13;
JSONPathLexer.REG = 14;
JSONPathLexer.IN = 15;
JSONPathLexer.NIN = 16;
JSONPathLexer.SUB = 17;
JSONPathLexer.ANY = 18;
JSONPathLexer.NON = 19;
JSONPathLexer.SIZO = 20;
JSONPathLexer.SIZ = 21;
JSONPathLexer.EMPT = 22;
JSONPathLexer.NOT = 23;
JSONPathLexer.OR = 24;
JSONPathLexer.TRUE = 25;
JSONPathLexer.FALSE = 26;
JSONPathLexer.NULL = 27;
JSONPathLexer.BRACE_LEFT = 28;
JSONPathLexer.BRACE_RIGHT = 29;
JSONPathLexer.BRACKET_LEFT = 30;
JSONPathLexer.BRACKET_RIGHT = 31;
JSONPathLexer.COLON = 32;
JSONPathLexer.COMMA = 33;
JSONPathLexer.PAREN_LEFT = 34;
JSONPathLexer.PAREN_RIGHT = 35;
JSONPathLexer.QUESTION = 36;
JSONPathLexer.MINUS_SP = 37;
JSONPathLexer.PLUS = 38;
JSONPathLexer.DIV = 39;
JSONPathLexer.REGEX_OPT = 40;
JSONPathLexer.REGEX_EXPR = 41;
JSONPathLexer.KEY = 42;
JSONPathLexer.WS = 43;
JSONPathLexer.NUMBER = 44;
JSONPathLexer.STRING = 45;



