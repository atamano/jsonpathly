// Generated from src/parser/generated/JSONPath.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,44,343,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,
1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,
23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,
32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,5,38,248,
8,38,10,38,12,38,251,9,38,1,39,1,39,5,39,255,8,39,10,39,12,39,258,9,39,1,
39,1,39,1,40,1,40,5,40,264,8,40,10,40,12,40,267,9,40,1,41,4,41,270,8,41,
11,41,12,41,271,1,41,1,41,1,42,3,42,277,8,42,1,42,1,42,1,42,4,42,282,8,42,
11,42,12,42,283,3,42,286,8,42,1,42,3,42,289,8,42,1,43,1,43,1,43,5,43,294,
8,43,10,43,12,43,297,9,43,1,43,1,43,1,43,1,43,5,43,303,8,43,10,43,12,43,
306,9,43,1,43,3,43,309,8,43,1,44,1,44,1,44,3,44,314,8,44,1,45,1,45,1,45,
3,45,319,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
1,50,4,50,334,8,50,11,50,12,50,335,1,51,1,51,3,51,340,8,51,1,51,1,51,1,256,
0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,91,0,93,0,95,0,97,0,99,0,101,
0,103,0,1,0,12,6,0,103,103,105,105,109,109,115,115,117,117,121,121,3,0,65,
90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,1,0,48,
57,8,0,39,39,47,47,92,92,98,98,102,102,110,110,114,114,116,116,8,0,34,34,
47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,
3,0,0,31,39,39,92,92,3,0,0,31,34,34,92,92,2,0,69,69,101,101,2,0,43,43,45,
45,351,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,105,1,
0,0,0,3,107,1,0,0,0,5,110,1,0,0,0,7,112,1,0,0,0,9,114,1,0,0,0,11,116,1,0,
0,0,13,119,1,0,0,0,15,122,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,130,1,
0,0,0,23,132,1,0,0,0,25,135,1,0,0,0,27,138,1,0,0,0,29,143,1,0,0,0,31,149,
1,0,0,0,33,160,1,0,0,0,35,168,1,0,0,0,37,177,1,0,0,0,39,186,1,0,0,0,41,193,
1,0,0,0,43,200,1,0,0,0,45,202,1,0,0,0,47,205,1,0,0,0,49,210,1,0,0,0,51,216,
1,0,0,0,53,221,1,0,0,0,55,223,1,0,0,0,57,225,1,0,0,0,59,227,1,0,0,0,61,229,
1,0,0,0,63,231,1,0,0,0,65,233,1,0,0,0,67,235,1,0,0,0,69,237,1,0,0,0,71,239,
1,0,0,0,73,242,1,0,0,0,75,244,1,0,0,0,77,249,1,0,0,0,79,252,1,0,0,0,81,261,
1,0,0,0,83,269,1,0,0,0,85,276,1,0,0,0,87,308,1,0,0,0,89,310,1,0,0,0,91,315,
1,0,0,0,93,320,1,0,0,0,95,326,1,0,0,0,97,328,1,0,0,0,99,330,1,0,0,0,101,
333,1,0,0,0,103,337,1,0,0,0,105,106,5,64,0,0,106,2,1,0,0,0,107,108,5,46,
0,0,108,109,5,46,0,0,109,4,1,0,0,0,110,111,5,36,0,0,111,6,1,0,0,0,112,113,
5,46,0,0,113,8,1,0,0,0,114,115,5,42,0,0,115,10,1,0,0,0,116,117,5,38,0,0,
117,118,5,38,0,0,118,12,1,0,0,0,119,120,5,61,0,0,120,121,5,61,0,0,121,14,
1,0,0,0,122,123,5,62,0,0,123,124,5,61,0,0,124,16,1,0,0,0,125,126,5,62,0,
0,126,18,1,0,0,0,127,128,5,60,0,0,128,129,5,61,0,0,129,20,1,0,0,0,130,131,
5,60,0,0,131,22,1,0,0,0,132,133,5,33,0,0,133,134,5,61,0,0,134,24,1,0,0,0,
135,136,5,61,0,0,136,137,5,126,0,0,137,26,1,0,0,0,138,139,5,32,0,0,139,140,
5,105,0,0,140,141,5,110,0,0,141,142,5,32,0,0,142,28,1,0,0,0,143,144,5,32,
0,0,144,145,5,110,0,0,145,146,5,105,0,0,146,147,5,110,0,0,147,148,5,32,0,
0,148,30,1,0,0,0,149,150,5,32,0,0,150,151,5,115,0,0,151,152,5,117,0,0,152,
153,5,98,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,156,5,116,0,0,156,157,
5,111,0,0,157,158,5,102,0,0,158,159,5,32,0,0,159,32,1,0,0,0,160,161,5,32,
0,0,161,162,5,97,0,0,162,163,5,110,0,0,163,164,5,121,0,0,164,165,5,111,0,
0,165,166,5,102,0,0,166,167,5,32,0,0,167,34,1,0,0,0,168,169,5,32,0,0,169,
170,5,110,0,0,170,171,5,111,0,0,171,172,5,110,0,0,172,173,5,101,0,0,173,
174,5,111,0,0,174,175,5,102,0,0,175,176,5,32,0,0,176,36,1,0,0,0,177,178,
5,32,0,0,178,179,5,115,0,0,179,180,5,105,0,0,180,181,5,122,0,0,181,182,5,
101,0,0,182,183,5,111,0,0,183,184,5,102,0,0,184,185,5,32,0,0,185,38,1,0,
0,0,186,187,5,32,0,0,187,188,5,115,0,0,188,189,5,105,0,0,189,190,5,122,0,
0,190,191,5,101,0,0,191,192,5,32,0,0,192,40,1,0,0,0,193,194,5,32,0,0,194,
195,5,101,0,0,195,196,5,109,0,0,196,197,5,112,0,0,197,198,5,116,0,0,198,
199,5,121,0,0,199,42,1,0,0,0,200,201,5,33,0,0,201,44,1,0,0,0,202,203,5,124,
0,0,203,204,5,124,0,0,204,46,1,0,0,0,205,206,5,116,0,0,206,207,5,114,0,0,
207,208,5,117,0,0,208,209,5,101,0,0,209,48,1,0,0,0,210,211,5,102,0,0,211,
212,5,97,0,0,212,213,5,108,0,0,213,214,5,115,0,0,214,215,5,101,0,0,215,50,
1,0,0,0,216,217,5,110,0,0,217,218,5,117,0,0,218,219,5,108,0,0,219,220,5,
108,0,0,220,52,1,0,0,0,221,222,5,123,0,0,222,54,1,0,0,0,223,224,5,125,0,
0,224,56,1,0,0,0,225,226,5,91,0,0,226,58,1,0,0,0,227,228,5,93,0,0,228,60,
1,0,0,0,229,230,5,58,0,0,230,62,1,0,0,0,231,232,5,44,0,0,232,64,1,0,0,0,
233,234,5,40,0,0,234,66,1,0,0,0,235,236,5,41,0,0,236,68,1,0,0,0,237,238,
5,63,0,0,238,70,1,0,0,0,239,240,5,45,0,0,240,241,5,32,0,0,241,72,1,0,0,0,
242,243,5,43,0,0,243,74,1,0,0,0,244,245,5,47,0,0,245,76,1,0,0,0,246,248,
7,0,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,
250,78,1,0,0,0,251,249,1,0,0,0,252,256,5,47,0,0,253,255,9,0,0,0,254,253,
1,0,0,0,255,258,1,0,0,0,256,257,1,0,0,0,256,254,1,0,0,0,257,259,1,0,0,0,
258,256,1,0,0,0,259,260,5,47,0,0,260,80,1,0,0,0,261,265,7,1,0,0,262,264,
7,2,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,
266,82,1,0,0,0,267,265,1,0,0,0,268,270,7,3,0,0,269,268,1,0,0,0,270,271,1,
0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,6,41,0,0,274,
84,1,0,0,0,275,277,5,45,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,
0,0,278,285,3,101,50,0,279,281,5,46,0,0,280,282,7,4,0,0,281,280,1,0,0,0,
282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,279,
1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,289,3,103,51,0,288,287,1,0,0,
0,288,289,1,0,0,0,289,86,1,0,0,0,290,295,5,34,0,0,291,294,3,91,45,0,292,
294,3,99,49,0,293,291,1,0,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,
0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,309,5,34,0,0,299,
304,5,39,0,0,300,303,3,89,44,0,301,303,3,97,48,0,302,300,1,0,0,0,302,301,
1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,
306,304,1,0,0,0,307,309,5,39,0,0,308,290,1,0,0,0,308,299,1,0,0,0,309,88,
1,0,0,0,310,313,5,92,0,0,311,314,7,5,0,0,312,314,3,93,46,0,313,311,1,0,0,
0,313,312,1,0,0,0,314,90,1,0,0,0,315,318,5,92,0,0,316,319,7,6,0,0,317,319,
3,93,46,0,318,316,1,0,0,0,318,317,1,0,0,0,319,92,1,0,0,0,320,321,5,117,0,
0,321,322,3,95,47,0,322,323,3,95,47,0,323,324,3,95,47,0,324,325,3,95,47,
0,325,94,1,0,0,0,326,327,7,7,0,0,327,96,1,0,0,0,328,329,8,8,0,0,329,98,1,
0,0,0,330,331,8,9,0,0,331,100,1,0,0,0,332,334,7,4,0,0,333,332,1,0,0,0,334,
335,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,102,1,0,0,0,337,339,7,10,
0,0,338,340,7,11,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,
342,3,101,50,0,342,104,1,0,0,0,18,0,249,256,265,271,276,283,285,288,293,
295,302,304,308,313,318,335,339,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class JSONPathLexer extends antlr4.Lexer {

    static grammarFileName = "JSONPath.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'@'", "'..'", "'$'", "'.'", "'*'", "'&&'", 
                         "'=='", "'>='", "'>'", "'<='", "'<'", "'!='", "'=~'", 
                         "' in '", "' nin '", "' subsetof '", "' anyof '", 
                         "' noneof '", "' sizeof '", "' size '", "' empty'", 
                         "'!'", "'||'", "'true'", "'false'", "'null'", "'{'", 
                         "'}'", "'['", "']'", "':'", "','", "'('", "')'", 
                         "'?'", "'- '", "'+'", "'/'" ];
	static symbolicNames = [ null, "CURRENT_VALUE", "DOTDOT", "ROOT_VALUE", 
                          "DOT", "STAR", "AND", "EQ", "GE", "GT", "LE", 
                          "LT", "NE", "REG", "IN", "NIN", "SUB", "ANY", 
                          "NON", "SIZO", "SIZ", "EMPT", "NOT", "OR", "TRUE", 
                          "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", 
                          "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", 
                          "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", "MINUS_SP", 
                          "PLUS", "DIV", "REGEX_OPT", "REGEX_EXPR", "KEY", 
                          "WS", "NUMBER", "STRING" ];
	static ruleNames = [ "CURRENT_VALUE", "DOTDOT", "ROOT_VALUE", "DOT", "STAR", 
                      "AND", "EQ", "GE", "GT", "LE", "LT", "NE", "REG", 
                      "IN", "NIN", "SUB", "ANY", "NON", "SIZO", "SIZ", "EMPT", 
                      "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", 
                      "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", 
                      "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", 
                      "MINUS_SP", "PLUS", "DIV", "REGEX_OPT", "REGEX_EXPR", 
                      "KEY", "WS", "NUMBER", "STRING", "ESC_SINGLE", "ESC_DOUBLE", 
                      "UNICODE", "HEX", "SAFECODEPOINT_SINGLE", "SAFECODEPOINT_DOUBLE", 
                      "INT", "EXP" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

JSONPathLexer.EOF = antlr4.Token.EOF;
JSONPathLexer.CURRENT_VALUE = 1;
JSONPathLexer.DOTDOT = 2;
JSONPathLexer.ROOT_VALUE = 3;
JSONPathLexer.DOT = 4;
JSONPathLexer.STAR = 5;
JSONPathLexer.AND = 6;
JSONPathLexer.EQ = 7;
JSONPathLexer.GE = 8;
JSONPathLexer.GT = 9;
JSONPathLexer.LE = 10;
JSONPathLexer.LT = 11;
JSONPathLexer.NE = 12;
JSONPathLexer.REG = 13;
JSONPathLexer.IN = 14;
JSONPathLexer.NIN = 15;
JSONPathLexer.SUB = 16;
JSONPathLexer.ANY = 17;
JSONPathLexer.NON = 18;
JSONPathLexer.SIZO = 19;
JSONPathLexer.SIZ = 20;
JSONPathLexer.EMPT = 21;
JSONPathLexer.NOT = 22;
JSONPathLexer.OR = 23;
JSONPathLexer.TRUE = 24;
JSONPathLexer.FALSE = 25;
JSONPathLexer.NULL = 26;
JSONPathLexer.BRACE_LEFT = 27;
JSONPathLexer.BRACE_RIGHT = 28;
JSONPathLexer.BRACKET_LEFT = 29;
JSONPathLexer.BRACKET_RIGHT = 30;
JSONPathLexer.COLON = 31;
JSONPathLexer.COMMA = 32;
JSONPathLexer.PAREN_LEFT = 33;
JSONPathLexer.PAREN_RIGHT = 34;
JSONPathLexer.QUESTION = 35;
JSONPathLexer.MINUS_SP = 36;
JSONPathLexer.PLUS = 37;
JSONPathLexer.DIV = 38;
JSONPathLexer.REGEX_OPT = 39;
JSONPathLexer.REGEX_EXPR = 40;
JSONPathLexer.KEY = 41;
JSONPathLexer.WS = 42;
JSONPathLexer.NUMBER = 43;
JSONPathLexer.STRING = 44;



