// Generated from ./src/parser/JSONPath.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONPathLexer extends Lexer {
	public static readonly CURRENT_VALUE = 1;
	public static readonly RECURSIVE_DESCENT = 2;
	public static readonly ROOT_VALUE = 3;
	public static readonly SUBSCRIPT = 4;
	public static readonly WILDCARD = 5;
	public static readonly AND = 6;
	public static readonly EQ = 7;
	public static readonly GE = 8;
	public static readonly GT = 9;
	public static readonly LE = 10;
	public static readonly LT = 11;
	public static readonly NE = 12;
	public static readonly IN = 13;
	public static readonly NIN = 14;
	public static readonly NOT = 15;
	public static readonly OR = 16;
	public static readonly TRUE = 17;
	public static readonly FALSE = 18;
	public static readonly NULL = 19;
	public static readonly BRACE_LEFT = 20;
	public static readonly BRACE_RIGHT = 21;
	public static readonly BRACKET_LEFT = 22;
	public static readonly BRACKET_RIGHT = 23;
	public static readonly COLON = 24;
	public static readonly COMMA = 25;
	public static readonly PAREN_LEFT = 26;
	public static readonly PAREN_RIGHT = 27;
	public static readonly QUESTION = 28;
	public static readonly IDENTIFIER = 29;
	public static readonly STRING = 30;
	public static readonly NUMBER = 31;
	public static readonly WS = 32;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", "WILDCARD", 
		"AND", "EQ", "GE", "GT", "LE", "LT", "NE", "IN", "NIN", "NOT", "OR", "TRUE", 
		"FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", 
		"COLON", "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", "IDENTIFIER", 
		"STRING", "ESC_SINGLE", "ESC_DOUBLE", "UNICODE", "HEX", "SAFECODEPOINT_SINGLE", 
		"SAFECODEPOINT_DOUBLE", "NUMBER", "INT", "EXP", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'@'", "'..'", "'$'", "'.'", "'*'", "'&&'", "'=='", "'>='", 
		"'>'", "'<='", "'<'", "'!='", "'in'", "'nin'", "'!'", "'||'", "'true'", 
		"'false'", "'null'", "'{'", "'}'", "'['", "']'", "':'", "','", "'('", 
		"')'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", 
		"WILDCARD", "AND", "EQ", "GE", "GT", "LE", "LT", "NE", "IN", "NIN", "NOT", 
		"OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", 
		"BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", 
		"IDENTIFIER", "STRING", "NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONPathLexer._LITERAL_NAMES, JSONPathLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONPathLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONPathLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSONPath.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONPathLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONPathLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JSONPathLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JSONPathLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\"\xF6\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06" +
		"\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03" +
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03" +
		"\x1E\x07\x1E\xA2\n\x1E\f\x1E\x0E\x1E\xA5\v\x1E\x03\x1F\x03\x1F\x03\x1F" +
		"\x07\x1F\xAA\n\x1F\f\x1F\x0E\x1F\xAD\v\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x07\x1F\xB3\n\x1F\f\x1F\x0E\x1F\xB6\v\x1F\x03\x1F\x05\x1F\xB9\n\x1F" +
		"\x03 \x03 \x03 \x05 \xBE\n \x03!\x03!\x03!\x05!\xC3\n!\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x05&\xD2\n&\x03" +
		"&\x03&\x03&\x06&\xD7\n&\r&\x0E&\xD8\x05&\xDB\n&\x03&\x05&\xDE\n&\x03\'" +
		"\x03\'\x03\'\x07\'\xE3\n\'\f\'\x0E\'\xE6\v\'\x05\'\xE8\n\'\x03(\x03(\x05" +
		"(\xEC\n(\x03(\x03(\x03)\x06)\xF1\n)\r)\x0E)\xF2\x03)\x03)\x02\x02\x02" +
		"*\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16" +
		"+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E" +
		";\x02\x1F=\x02 ?\x02\x02A\x02\x02C\x02\x02E\x02\x02G\x02\x02I\x02\x02" +
		"K\x02!M\x02\x02O\x02\x02Q\x02\"\x03\x02\x0E\x05\x02C\\aac|\x06\x022;C" +
		"\\aac|\n\x02))11^^ddhhppttvv\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05\x02" +
		"\x02!))^^\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--/" +
		"/\x05\x02\v\f\x0F\x0F\"\"\x02\xFD\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02K\x03" +
		"\x02\x02\x02\x02Q\x03\x02\x02\x02\x03S\x03\x02\x02\x02\x05U\x03\x02\x02" +
		"\x02\x07X\x03\x02\x02\x02\tZ\x03\x02\x02\x02\v\\\x03\x02\x02\x02\r^\x03" +
		"\x02\x02\x02\x0Fa\x03\x02\x02\x02\x11d\x03\x02\x02\x02\x13g\x03\x02\x02" +
		"\x02\x15i\x03\x02\x02\x02\x17l\x03\x02\x02\x02\x19n\x03\x02\x02\x02\x1B" +
		"q\x03\x02\x02\x02\x1Dt\x03\x02\x02\x02\x1Fx\x03\x02\x02\x02!z\x03\x02" +
		"\x02\x02#}\x03\x02\x02\x02%\x82\x03\x02\x02\x02\'\x88\x03\x02\x02\x02" +
		")\x8D\x03\x02\x02\x02+\x8F\x03\x02\x02\x02-\x91\x03\x02\x02\x02/\x93\x03" +
		"\x02\x02\x021\x95\x03\x02\x02\x023\x97\x03\x02\x02\x025\x99\x03\x02\x02" +
		"\x027\x9B\x03\x02\x02\x029\x9D\x03\x02\x02\x02;\x9F\x03\x02\x02\x02=\xB8" +
		"\x03\x02\x02\x02?\xBA\x03\x02\x02\x02A\xBF\x03\x02\x02\x02C\xC4\x03\x02" +
		"\x02\x02E\xCA\x03\x02\x02\x02G\xCC\x03\x02\x02\x02I\xCE\x03\x02\x02\x02" +
		"K\xD1\x03\x02\x02\x02M\xE7\x03\x02\x02\x02O\xE9\x03\x02\x02\x02Q\xF0\x03" +
		"\x02\x02\x02ST\x07B\x02\x02T\x04\x03\x02\x02\x02UV\x070\x02\x02VW\x07" +
		"0\x02\x02W\x06\x03\x02\x02\x02XY\x07&\x02\x02Y\b\x03\x02\x02\x02Z[\x07" +
		"0\x02\x02[\n\x03\x02\x02\x02\\]\x07,\x02\x02]\f\x03\x02\x02\x02^_\x07" +
		"(\x02\x02_`\x07(\x02\x02`\x0E\x03\x02\x02\x02ab\x07?\x02\x02bc\x07?\x02" +
		"\x02c\x10\x03\x02\x02\x02de\x07@\x02\x02ef\x07?\x02\x02f\x12\x03\x02\x02" +
		"\x02gh\x07@\x02\x02h\x14\x03\x02\x02\x02ij\x07>\x02\x02jk\x07?\x02\x02" +
		"k\x16\x03\x02\x02\x02lm\x07>\x02\x02m\x18\x03\x02\x02\x02no\x07#\x02\x02" +
		"op\x07?\x02\x02p\x1A\x03\x02\x02\x02qr\x07k\x02\x02rs\x07p\x02\x02s\x1C" +
		"\x03\x02\x02\x02tu\x07p\x02\x02uv\x07k\x02\x02vw\x07p\x02\x02w\x1E\x03" +
		"\x02\x02\x02xy\x07#\x02\x02y \x03\x02\x02\x02z{\x07~\x02\x02{|\x07~\x02" +
		"\x02|\"\x03\x02\x02\x02}~\x07v\x02\x02~\x7F\x07t\x02\x02\x7F\x80\x07w" +
		"\x02\x02\x80\x81\x07g\x02\x02\x81$\x03\x02\x02\x02\x82\x83\x07h\x02\x02" +
		"\x83\x84\x07c\x02\x02\x84\x85\x07n\x02\x02\x85\x86\x07u\x02\x02\x86\x87" +
		"\x07g\x02\x02\x87&\x03\x02\x02\x02\x88\x89\x07p\x02\x02\x89\x8A\x07w\x02" +
		"\x02\x8A\x8B\x07n\x02\x02\x8B\x8C\x07n\x02\x02\x8C(\x03\x02\x02\x02\x8D" +
		"\x8E\x07}\x02\x02\x8E*\x03\x02\x02\x02\x8F\x90\x07\x7F\x02\x02\x90,\x03" +
		"\x02\x02\x02\x91\x92\x07]\x02\x02\x92.\x03\x02\x02\x02\x93\x94\x07_\x02" +
		"\x02\x940\x03\x02\x02\x02\x95\x96\x07<\x02\x02\x962\x03\x02\x02\x02\x97" +
		"\x98\x07.\x02\x02\x984\x03\x02\x02\x02\x99\x9A\x07*\x02\x02\x9A6\x03\x02" +
		"\x02\x02\x9B\x9C\x07+\x02\x02\x9C8\x03\x02\x02\x02\x9D\x9E\x07A\x02\x02" +
		"\x9E:\x03\x02\x02\x02\x9F\xA3\t\x02\x02\x02\xA0\xA2\t\x03\x02\x02\xA1" +
		"\xA0\x03\x02\x02\x02\xA2\xA5\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA3" +
		"\xA4\x03\x02\x02\x02\xA4<\x03\x02\x02\x02\xA5\xA3\x03\x02\x02\x02\xA6" +
		"\xAB\x07$\x02\x02\xA7\xAA\x05A!\x02\xA8\xAA\x05I%\x02\xA9\xA7\x03\x02" +
		"\x02\x02\xA9\xA8\x03\x02\x02\x02\xAA\xAD\x03\x02\x02\x02\xAB\xA9\x03\x02" +
		"\x02\x02\xAB\xAC\x03\x02\x02\x02\xAC\xAE\x03\x02\x02\x02\xAD\xAB\x03\x02" +
		"\x02\x02\xAE\xB9\x07$\x02\x02\xAF\xB4\x07)\x02\x02\xB0\xB3\x05? \x02\xB1" +
		"\xB3\x05G$\x02\xB2\xB0\x03\x02\x02\x02\xB2\xB1\x03\x02\x02\x02\xB3\xB6" +
		"\x03\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB7" +
		"\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02\xB7\xB9\x07)\x02\x02\xB8\xA6" +
		"\x03\x02\x02\x02\xB8\xAF\x03\x02\x02\x02\xB9>\x03\x02\x02\x02\xBA\xBD" +
		"\x07^\x02\x02\xBB\xBE\t\x04\x02\x02\xBC\xBE\x05C\"\x02\xBD\xBB\x03\x02" +
		"\x02\x02\xBD\xBC\x03\x02\x02\x02\xBE@\x03\x02\x02\x02\xBF\xC2\x07^\x02" +
		"\x02\xC0\xC3\t\x05\x02\x02\xC1\xC3\x05C\"\x02\xC2\xC0\x03\x02\x02\x02" +
		"\xC2\xC1\x03\x02\x02\x02\xC3B\x03\x02\x02\x02\xC4\xC5\x07w\x02\x02\xC5" +
		"\xC6\x05E#\x02\xC6\xC7\x05E#\x02\xC7\xC8\x05E#\x02\xC8\xC9\x05E#\x02\xC9" +
		"D\x03\x02\x02\x02\xCA\xCB\t\x06\x02\x02\xCBF\x03\x02\x02\x02\xCC\xCD\n" +
		"\x07\x02\x02\xCDH\x03\x02\x02\x02\xCE\xCF\n\b\x02\x02\xCFJ\x03\x02\x02" +
		"\x02\xD0\xD2\x07/\x02\x02\xD1\xD0\x03\x02\x02\x02\xD1\xD2\x03\x02\x02" +
		"\x02\xD2\xD3\x03\x02\x02\x02\xD3\xDA\x05M\'\x02\xD4\xD6\x070\x02\x02\xD5" +
		"\xD7\t\t\x02\x02\xD6\xD5\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8\xD6" +
		"\x03\x02\x02\x02\xD8\xD9\x03\x02\x02\x02\xD9\xDB\x03\x02\x02\x02\xDA\xD4" +
		"\x03\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDB\xDD\x03\x02\x02\x02\xDC\xDE" +
		"\x05O(\x02\xDD\xDC\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDEL\x03\x02" +
		"\x02\x02\xDF\xE8\x072\x02\x02\xE0\xE4\t\n\x02\x02\xE1\xE3\t\t\x02\x02" +
		"\xE2\xE1\x03\x02\x02\x02\xE3\xE6\x03\x02\x02\x02\xE4\xE2\x03\x02\x02\x02" +
		"\xE4\xE5\x03\x02\x02\x02\xE5\xE8\x03\x02\x02\x02\xE6\xE4\x03\x02\x02\x02" +
		"\xE7\xDF\x03\x02\x02\x02\xE7\xE0\x03\x02\x02\x02\xE8N\x03\x02\x02\x02" +
		"\xE9\xEB\t\v\x02\x02\xEA\xEC\t\f\x02\x02\xEB\xEA\x03\x02\x02\x02\xEB\xEC" +
		"\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02\xED\xEE\x05M\'\x02\xEEP\x03\x02" +
		"\x02\x02\xEF\xF1\t\r\x02\x02\xF0\xEF\x03\x02\x02\x02\xF1\xF2\x03\x02\x02" +
		"\x02\xF2\xF0\x03\x02\x02\x02\xF2\xF3\x03\x02\x02\x02\xF3\xF4\x03\x02\x02" +
		"\x02\xF4\xF5\b)\x02\x02\xF5R\x03\x02\x02\x02\x13\x02\xA3\xA9\xAB\xB2\xB4" +
		"\xB8\xBD\xC2\xD1\xD8\xDA\xDD\xE4\xE7\xEB\xF2\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONPathLexer.__ATN) {
			JSONPathLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONPathLexer._serializedATN));
		}

		return JSONPathLexer.__ATN;
	}

}

